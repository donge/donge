<p>现在提起AJAX，大家都立刻会想起Gmail、google map这几个经典的AJAX应用。Gmail的优良表现我们都看过了，那么它的实现你研究过了吗？它怎么在几个不同的浏览器上可以一致的实现xml异步调用的呢？一起来看看吧。 <br /><br />首先，登录gmail以后我们会先进入这个页面： <br /><br /></p><center><ccid_nobr /><table cellspacing=\"0\" bordercolordark=\"#ffffff\" cellpadding=\"2\" width=\"400\" align=\"center\" bordercolorlight=\"#000000\" border=\"1\"><tbody><tr><td class=\"code\" style=\"FONT-SIZE: 9pt\" bgcolor=\"#e6e6e6\"><pre><ccid_code />＜html＞<br>＜head＞<br>＜meta content=&quot;text/html; <br>charset=UTF-8&quot; <br>http-equiv=&quot;content-type&quot;＞<br>＜title＞Gmailtitle＞<br>＜link rel=&quot;alternate&quot; <br>type=&quot;application/atom+xml&quot; <br>title=&quot;Gmail Atom Feed&quot; <br>href=&quot;feed/atom&quot; /＞<br>＜script src=&quot;?view=page&amp;name=<br>browser&amp;ver=c0d3d44c64799453&quot;＞<br>＜/script＞<br>head＞<br>＜noscript＞<br>＜font face=arial＞</ccid_code /></pre></td></tr></tbody></table></ccid_nobr /></center><p><br /><br />应启用JavaScript，才能在标准视图中使用Gmail。然而，JavaScript似乎已被禁用，要么就是您的浏览器不支持JavaScript。要使用标准视图，请更改您的浏览器选项以启用 JavaScript，然后＜a href=&quot;&quot;＞重试＜a＞。＜p＞要使用 Gmail 的基本 HTML 视图（不需要 JavaScript），＜a href=&quot;?ui=html&amp;zy=n&quot;＞请单击此处＜/a＞。 <br /><br /></p><center><ccid_nobr /><table cellspacing=\"0\" bordercolordark=\"#ffffff\" cellpadding=\"2\" width=\"400\" align=\"center\" bordercolorlight=\"#000000\" border=\"1\"><tbody><tr><td class=\"code\" style=\"FONT-SIZE: 9pt\" bgcolor=\"#e6e6e6\"><pre><ccid_code />＜p＞<br>＜/font＞<br>＜/noscript＞<br>＜script＞<br>(编者注：原文如此)<br>＜/script＞<br>＜/html＞</ccid_code /></pre></td></tr></tbody></table></ccid_nobr /></center><p><br /><br />这是主框架网页兼浏览器检测页。如果浏览器通过了检测（支持javascript、cookie和xml控件）则在页面上写一段框架代码 <br /><br />要注意到的是google在这里耍了一个小花招，那个叫做main的框架页面里面看来没有多少东西，好东东都在那个叫js的框架里面呢。我们接着把这个js框架拉出来看看： <br /><br />整整1500多行的javascript代码！这个页面有240多k，几乎全都是javascript代码。 <br /><br />其实其中大部分都是老生常谈的js代码了，不过我们可以一窥google的编码风格：尽可能压缩信息量，变量名能用一个字母的绝不用两个，函数名一概都是两个字母的，函数内的会车是没有的，缩进也是没有的。 <br /><br />虽然代码没有特地加密，但是如此处理一番之后也就没什么可读性了。还好系统的关键字是不能缩水的，顺着xml控件的名字我们可以揪出来跟AJAX异步加载数据相关的几个关键函数： <br /><br /></p><center><ccid_nobr /><table cellspacing=\"0\" bordercolordark=\"#ffffff\" cellpadding=\"2\" width=\"400\" align=\"center\" bordercolorlight=\"#000000\" border=\"1\"><tbody><tr><td class=\"code\" style=\"FONT-SIZE: 9pt\" bgcolor=\"#e6e6e6\"><pre><ccid_code />function vb()<br>&leftsign;<br>　var a=null;<br>　if(r)<br>　&leftsign;<br>　　var b=fG?&quot;Microsoft.XMLHTTP&quot;:<br>&quot;Msxml2.XMLHTTP&quot;;<br>　　try&leftsign;a=new ActiveXObject(b)<br>&rightsign;<br>　　catch(c)<br>　　&leftsign;<br>　　　q(c);<br>　　　alert<br>(&quot;您需要启用活动脚本功能和activeX 控件。&quot;)<br>　　&rightsign;<br>　&rightsign;else&leftsign;<br>　　a=new XMLHttpRequest();<br>　　if(!a)&leftsign;;alert<br>(&quot;此浏览器不支持 XMLHttpRequest。&quot;)&rightsign;<br>　&rightsign;<br>　return a<br>&rightsign;<br>//emu注释 构造XML控件并返回给调用者<br><br>function ot(a,b)&leftsign;;<br>　try&leftsign;<br>　　a.send(b)<br>　&rightsign;<br>　catch(c)<br>　&leftsign;<br>　　q(c);<br>　　if(c.number==-2146697208)<br>&leftsign;<br>　　　alert(&quot;请确保 <br>Internet Explorer 的”语言”设置部分不是空白。&quot;)&rightsign;<br>　&rightsign;<br>&rightsign;<br><br>//emu注释 执行发送数据操作<br>a:XML控件 b:要发送的数据<br><br>function Wf(a,b,c)&leftsign;<br>　Da(3);<br>　b=Ld(b);<br>　Hf(a,b,c)<br>&rightsign;<br><br>//emu注释<br>a:XML控件<br>b:访问的url <br>c:回调函数 Da是验证参数长度的函数 <br>//Ld是一个url转换加工的函数，<br>主要处理url自带的CGI参数和翻页的页数等<br><br>function Hf(a,b,c)&leftsign;<br>　Da(3);<br>　a.onreadystatechange=c;<br>　a.open(&quot;GET&quot;,b,true);<br>　ot(a,null)<br>&rightsign;<br>//emu注释 不发送数据直接请求资源 <br>a:XML控件 b:访问的url c:回调函数<br><br>function nt(a,b,c,d)&leftsign;<br>　Da(4);<br>　a.onreadystatechange=d;<br>　a.open(&quot;POST&quot;,b,true);<br>　ot(a,c)<br>&rightsign;</ccid_code /></pre></td></tr></tbody></table></ccid_nobr /></center><p><br /><br />//emu注释 发送数据并请求资源 a:XML控件 b:访问的url c:要发送的数据 d:回调函数 <br /><br />发送http请求之后它又怎么处理返回的xml的呢？事实上他没有处理。他所处理的仅仅是最基本responseText，而cgi则直接生成js脚本到客户端回调(用eval运行)，或者生成文本信息。这就是为什么gmail可以轻松跨域几个浏览器了。 <br /><br />作为最受推崇的一个AJAX应用，却几乎没有用到xml。像这样用xml控件来收发文本信息后在页面上展现的技术，基本上就是现在AJAX最流行的应用方式了，不过这样也能叫AJAX吗？我宁可就叫它AJ，最多叫AJAH。 <br /></p><img src=\"http://donge.org/blog/img/emot/smile.gif\" border=\"0\" /><θθθ>41|