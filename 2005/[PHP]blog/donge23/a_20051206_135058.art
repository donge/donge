<table cellspacing=\"0\" cellpadding=\"0\" width=\"98%\" align=\"center\" border=\"0\"><tbody><tr><td style=\"WIDTH: 700px; WORD-WRAP: break-word\" align=\"center\" width=\"100%\"><font face=\"楷体_GB2312\" color=\"#cc0000\" size=\"+2\"><strong>关于加密和安全 V0.94</strong></font> </td></tr><tr><td align=\"center\" width=\"100%\"><table style=\"TABLE-LAYOUT: fixed\" cellspacing=\"0\" cellpadding=\"0\" align=\"center\" border=\"0\"><tbody><tr><td align=\"center\" width=\"100%\"></td></tr><tr><td class=\"newstitle\" id=\"fontzoom\" valign=\"top\"><br /><p class=\"MsoPlainText\" style=\"MARGIN: 0cm 0cm 0pt; TEXT-INDENT: 21pt\"><font color=\"#0000ff\" size=\"3\"><span style=\"mso-bidi-font-family: 宋体; mso-hansi-font-family: 宋体\">本版修正了以前版本中几处描述不严谨的几个地方</span></font></p><p class=\"MsoPlainText\" style=\"MARGIN: 0cm 0cm 0pt; TEXT-INDENT: 21pt\"><font color=\"#ff0000\"><span style=\"mso-bidi-font-family: 宋体; mso-hansi-font-family: 宋体\"><font size=\"3\">本文已经制作成电子书，由PDF和CHM2种格式。</font><a href=\"http://www.flagware.net/uploadfile/关于加密和安全.zip\"><font style=\"BACKGROUND-COLOR: #dcdcdc\" size=\"5\">下载观看</font></a></span></font></p><p class=\"MsoPlainText\" style=\"MARGIN: 0cm 0cm 0pt; TEXT-INDENT: 21pt\"><font size=\"3\"><span style=\"mso-bidi-font-family: 宋体; mso-hansi-font-family: 宋体\"></span></font> </p><p class=\"MsoPlainText\" style=\"MARGIN: 0cm 0cm 0pt; TEXT-INDENT: 21pt\"><font size=\"3\"><span style=\"mso-bidi-font-family: 宋体; mso-hansi-font-family: 宋体\">本文版权归作者 舞飞的枫叶 &amp; Banner所有。制作该文档的目的是为了方便广大计算机用户。在保留本版权信息的前提下，您可以自由地复制、转载本文档。但除非有作者书面许可，否则不能将本文档用于商业用途。作者Email：<a href=\"mailto:JimmyFan@FlagWare.net\">JimmyFan@FlagWare.net</a>, <a href=\"mailto:Banner@FlagWare.net\">Banner@FlagWare.net</a>,作者网站： <a href=\"http://www.flagware.net/\">http://www.FlagWare.net</a>。</span></font></p><p class=\"MsoPlainText\" style=\"MARGIN: 0cm 0cm 0pt; TEXT-INDENT: 21pt\"><font size=\"3\"><span style=\"mso-bidi-font-family: 宋体; mso-hansi-font-family: 宋体\"></span></font> </p><p class=\"MsoPlainText\" style=\"MARGIN: 0cm 0cm 0pt; TEXT-INDENT: 21pt\"><font size=\"3\"><span style=\"mso-bidi-font-family: 宋体; mso-hansi-font-family: 宋体\">安全在计算机行业中可能会是个永久的话题。2004年到2005年间，山东大学王小云教授攻破MD5，降低了SHA-1的安全强度，这更是引起了大家的关注。并且，随着网络技术的发展和普及，大家的网络安全意识也越来越强。因此，在这里对加密和安全的基础知识做一点入门性质的介绍，以便大家能对这方面有更准确的了解和把握，能更好地保护自己重要数据的安全。</span></font></p><p class=\"MsoPlainText\" style=\"MARGIN: 0cm 0cm 0pt; TEXT-INDENT: 21pt\"><font size=\"3\"><span style=\"mso-bidi-font-family: 宋体; mso-hansi-font-family: 宋体\">本文侧重密码方面的基础知识的介绍。本文一直在逐步修改和完善。 如果哪位朋友在安全方面存在疑惑和问题，欢迎提出来，我们将尽力帮忙寻求解答，并丰富本文的内容，以便能帮助更多的人。如果本文存在问题和错误，也欢迎诸位给予批评指正。</span></font></p><span style=\"mso-bidi-font-family: 宋体; mso-hansi-font-family: 宋体\"><font size=\"3\"><h2 style=\"MARGIN: 13pt 0cm 13pt 21pt; TEXT-INDENT: -21pt; tab-stops: list 21.0pt; mso-list: l0 level1 lfo1\"><span lang=\"EN-US\" style=\"mso-bidi-font-family: Arial; mso-fareast-font-family: Arial\"><span style=\"mso-list: Ignore\"><font face=\"Arial\">1.</font></span></span><span style=\"FONT-FAMILY: 黑体; mso-ascii-font-family: Arial\">请大家准备好，开工了</span></h2><p class=\"MsoPlainText\" style=\"MARGIN: 0cm 0cm 0pt; TEXT-INDENT: 21pt\">密码学的方法离我们并不遥远。它应用很广泛，在我们日常使用计算机的时候就会经常用到，只不过我们没有多加留意而已。比如我们启动Windows的时候，我们要输入口令，这个口令在系统中就是加密后保存的。在我们上网时，有些网站需要我们建立安全连接，这时也是在密码算法支持下进行的。在你的IE浏览器中，看一下工具-&gt;Internet选项-&gt;内容-&gt;证书，会发现密码技术其实早已在后台默默地为我们工作了。</p><p class=\"MsoPlainText\" style=\"MARGIN: 0cm 0cm 0pt; TEXT-INDENT: 21pt\"> </p><p class=\"MsoPlainText\" style=\"MARGIN: 0cm 0cm 0pt; TEXT-INDENT: 21pt\">密码算法有很多种。包括对称算法、非对称算法、消息摘要算法等。对称加密算法包括DES和AES等；非对称加密算法包括RSA、DSA、椭圆曲线算法等。</p><p class=\"MsoPlainText\" style=\"MARGIN: 0cm 0cm 0pt; TEXT-INDENT: 21pt\"> </p><p class=\"MsoPlainText\" style=\"MARGIN: 0cm 0cm 0pt; TEXT-INDENT: 21pt\">接下来将以逐条解释基本概念的形式对主要的密码安全技术做一个简单的介绍。</p><span style=\"FONT-SIZE: 10.5pt; FONT-FAMILY: 宋体; mso-bidi-font-family: 宋体; mso-ascii-font-family: \'Times New Roman\'; mso-bidi-font-size: 12.0pt; mso-font-kerning: 1.0pt; mso-ansi-language: EN-US; mso-fareast-language: ZH-CN; mso-bidi-language: AR-SA\"><h2 style=\"MARGIN: 13pt 0cm 13pt 21pt; TEXT-INDENT: -21pt; tab-stops: list 21.0pt; mso-list: l0 level1 lfo1\"><span lang=\"EN-US\" style=\"mso-bidi-font-family: Arial; mso-fareast-font-family: Arial\"><span style=\"mso-list: Ignore\"><font face=\"Arial\">2.</font></span></span><span style=\"FONT-FAMILY: 黑体; mso-ascii-font-family: Arial\">朴素的密码</span></h2><p class=\"MsoPlainText\" style=\"MARGIN: 0cm 0cm 0pt; TEXT-INDENT: 21pt\"><span style=\"mso-bidi-font-family: 宋体; mso-hansi-font-family: 宋体\">“天王盖地虎，宝塔镇河妖<span lang=\"EN-US\">……</span>”大家一定在电影里看过土匪对暗号的场面。其实，土匪口中的“黑话”就是一种最朴素的密码。只不过这种密码过于简单，经不起密码学家的分析，非常容易破译。<span lang=\"EN-US\"><p /></span></span></p><h2 style=\"MARGIN: 13pt 0cm 13pt 21pt; TEXT-INDENT: -21pt; tab-stops: list 21.0pt; mso-list: l0 level1 lfo1\"><span lang=\"EN-US\" style=\"mso-bidi-font-family: Arial; mso-fareast-font-family: Arial\"><span style=\"mso-list: Ignore\"><font face=\"Arial\">3.</font></span></span><span style=\"FONT-FAMILY: 黑体; mso-ascii-font-family: Arial\">凯撒密码</span></h2><p class=\"MsoPlainText\" style=\"MARGIN: 0cm 0cm 0pt; TEXT-INDENT: 21pt\">这是一个古老的加密方法，当年<span style=\"mso-bidi-font-family: 宋体; mso-hansi-font-family: 宋体\">凯撒大帝行军打仗时用这种方法进行通信，因此得名。</span>它的原理很简单，其实就是单字母的替换。让我们看一个简单的例子：“<span lang=\"EN-US\">This is Caesar Code</span>”。用凯撒密码加密后字符串变为“<span lang=\"EN-US\">vjku ku Ecguct Eqfg</span>”。看起来似乎加密得很“安全”。可是你可以尝试一下，把这段很难懂的东西每一个字母换为字母表中前移<span lang=\"EN-US\">2</span>位的字母……哦，结果出来了。</p><p class=\"MsoPlainText\" style=\"MARGIN: 0cm 0cm 0pt; TEXT-INDENT: 21pt\">凯撒密码的字母对应关系：</p><p class=\"MsoPlainText\" style=\"MARGIN: 0cm 0cm 0pt\"><span lang=\"EN-US\" style=\"mso-bidi-font-family: 宋体; mso-hansi-font-family: 宋体\"><span style=\"mso-tab-count: 1\">    </span>A b c d e f g h i … x y z<p /></span></p><p class=\"MsoPlainText\" style=\"MARGIN: 0cm 0cm 0pt\"><span lang=\"EN-US\" style=\"mso-bidi-font-family: 宋体; mso-hansi-font-family: 宋体\"><span style=\"mso-spacerun: yes\">    </span>C d e f g h I j k … z a b<p /></span></p><h2 style=\"MARGIN: 13pt 0cm 13pt 21pt; TEXT-INDENT: -21pt; tab-stops: list 21.0pt; mso-list: l0 level1 lfo1\"><span lang=\"EN-US\" style=\"mso-bidi-font-family: Arial; mso-fareast-font-family: Arial\"><span style=\"mso-list: Ignore\"><font face=\"Arial\">4.</font></span></span><span lang=\"EN-US\"><font face=\"Arial\">rot13</font></span></h2><p class=\"MsoPlainText\" style=\"MARGIN: 0cm 0cm 0pt; TEXT-INDENT: 21pt\"><span lang=\"EN-US\">ROT13</span>是网络上常见的一种简单的“加密”方式。它是用字母表里<span lang=\"EN-US\">a</span>－<span lang=\"EN-US\">m</span>的字符来代替<span lang=\"EN-US\">n</span>－<span lang=\"EN-US\">z</span>，用<span lang=\"EN-US\">n</span>－<span lang=\"EN-US\">z</span>的字符来代替<span lang=\"EN-US\">a</span>－<span lang=\"EN-US\">m</span>字符。它的原理和凯撒密码非常类似。凯撒密码移了<span lang=\"EN-US\">2</span>位，而<span lang=\"EN-US\">ROT13</span>移了<span lang=\"EN-US\">13</span>位。<span lang=\"EN-US\">ROT13</span>通常作为简单的手段使得我们的电子信件不能被直接识别和阅读，也不会被那些匹配程序用通常的方法直接找到。</p><p class=\"MsoPlainText\" style=\"MARGIN: 0cm 0cm 0pt; TEXT-INDENT: 21pt\">如<span lang=\"EN-US\">&quot;V Ybir lbh!&quot;<span style=\"mso-spacerun: yes\">  </span></span>这个句子实际上是<span lang=\"EN-US\">&quot;I Love you!&quot;</span>。</p><p class=\"MsoPlainText\" style=\"MARGIN: 0cm 0cm 0pt; TEXT-INDENT: 21pt\"><span lang=\"EN-US\">ROT13</span>字母对应关系：</p><p class=\"MsoPlainText\" style=\"MARGIN: 0cm 0cm 0pt; TEXT-INDENT: 21pt\"><span lang=\"EN-US\">A b c d e f g h I </span><span lang=\"EN-US\" style=\"FONT-FAMILY: \'Courier New\'; mso-ascii-font-family: 宋体\">…</span><span lang=\"EN-US\"> x y z</span></p><p class=\"MsoPlainText\" style=\"MARGIN: 0cm 0cm 0pt; TEXT-INDENT: 21pt\"><span lang=\"EN-US\">N o p q r s t u v </span><span lang=\"EN-US\" style=\"FONT-FAMILY: \'Courier New\'; mso-ascii-font-family: 宋体\">…</span><span lang=\"EN-US\"> k l m</span></p><p class=\"MsoPlainText\" style=\"MARGIN: 0cm 0cm 0pt 18pt\">明白了吗？“解密”一下下面的内容：<span lang=\"EN-US\"> <br />jrypbxr gb jjj.syntjner.arg</span></p><h2 style=\"MARGIN: 13pt 0cm 13pt 21pt; TEXT-INDENT: -21pt; tab-stops: list 21.0pt; mso-list: l0 level1 lfo1\"><span lang=\"EN-US\" style=\"mso-bidi-font-family: Arial; mso-fareast-font-family: Arial\"><span style=\"mso-list: Ignore\"><font face=\"Arial\">5.</font></span></span><span style=\"FONT-FAMILY: 黑体; mso-ascii-font-family: Arial\">受限密码</span></h2><p class=\"MsoPlainText\" style=\"MARGIN: 0cm 0cm 0pt\"><span lang=\"EN-US\" style=\"mso-bidi-font-family: 宋体; mso-hansi-font-family: 宋体\"><span style=\"mso-tab-count: 1\">    </span></span><span style=\"mso-bidi-font-family: 宋体; mso-hansi-font-family: 宋体\">上面讨论的“加密”是非常简单的，简单到不用计算机的帮助就能手工破译，简单到只能防止<span lang=\"EN-US\">3</span>岁的小妹妹偷看你的文件<span lang=\"EN-US\"> :-) </span>。<span lang=\"EN-US\"><p /></span></span></p><p class=\"MsoPlainText\" style=\"MARGIN: 0cm 0cm 0pt; TEXT-INDENT: 21pt\"><span style=\"mso-bidi-font-family: 宋体; mso-hansi-font-family: 宋体\">我们可以把这些算法变得更复杂，引入更多的变换、更多的交叉和扩散 <span lang=\"EN-US\">…… </span>这样也许会更难破译些。但是，在这个基础上变得再复杂，也还跳不出“受限密码”的范畴。所谓“受限密码”，是指算法的安全性是建立在算法保密的基础上的。一旦算法泄漏，所加密的内容也就完全没有安全性可言了。我们前面讨论的算法就是有这个特点的。<span lang=\"EN-US\"><p /></span></span></p><p class=\"MsoPlainText\" style=\"MARGIN: 0cm 0cm 0pt; TEXT-INDENT: 21pt\"><span style=\"mso-bidi-font-family: 宋体; mso-hansi-font-family: 宋体\">算法泄漏的问题使得这类算法的应用范围受到很大的限制。基本上，现在已经没人用了。<span lang=\"EN-US\"><p /></span></span></p><h2 style=\"MARGIN: 13pt 0cm 13pt 21pt; TEXT-INDENT: -21pt; tab-stops: list 21.0pt; mso-list: l0 level1 lfo1\"><span lang=\"EN-US\" style=\"mso-bidi-font-family: Arial; mso-fareast-font-family: Arial\"><span style=\"mso-list: Ignore\"><font face=\"Arial\">6.</font></span></span><span style=\"FONT-FAMILY: 黑体; mso-ascii-font-family: Arial\">现代密码技术的开始：密钥与算法分离</span></h2><p class=\"MsoPlainText\" style=\"MARGIN: 0cm 0cm 0pt; TEXT-INDENT: 21pt\"><span style=\"mso-bidi-font-family: 宋体; mso-hansi-font-family: 宋体\">受限密码一旦泄漏了算法，那么所有加密的内容都会曝露在光天化日之下。使用这样的方法来保护重要信息是很危险的。因此，密码学家提出了算法和密钥分离的思想。这是密码学的一个里程碑。<span lang=\"EN-US\"><p /></span></span></p><p class=\"MsoPlainText\" style=\"MARGIN: 0cm 0cm 0pt; TEXT-INDENT: 21pt\"><span style=\"mso-bidi-font-family: 宋体; mso-hansi-font-family: 宋体\">它的思想是，密码的安全性取决于一个密钥，而不是取决于一个算法。每条消息用一个<span lang=\"EN-US\">Key</span>加密，只要<span lang=\"EN-US\">Key</span>不泄露，消息就是安全的。即使算法公开了，也威胁不到消息的安全性。现代的密码算法，如<span lang=\"EN-US\">3DES,AES</span>等，都是属于这一类。后面我们将会对这些算法做简要的介绍。<span lang=\"EN-US\"><p /></span></span></p><h2 style=\"MARGIN: 13pt 0cm 13pt 21pt; TEXT-INDENT: -21pt; tab-stops: list 21.0pt; mso-list: l0 level1 lfo1\"><span lang=\"EN-US\" style=\"mso-bidi-font-family: Arial; mso-fareast-font-family: Arial\"><span style=\"mso-list: Ignore\"><font face=\"Arial\">7.</font></span></span><span style=\"FONT-FAMILY: 黑体; mso-ascii-font-family: Arial\">澄清一个观念：通常没有绝对的信息安全</span></h2><p class=\"MsoPlainText\" style=\"MARGIN: 0cm 0cm 0pt\"><span lang=\"EN-US\" style=\"mso-bidi-font-family: 宋体; mso-hansi-font-family: 宋体\"><span style=\"mso-tab-count: 1\">    </span></span><span style=\"mso-bidi-font-family: 宋体; mso-hansi-font-family: 宋体\">在介绍现代的密码和信息安全技术之前，有必要澄清一个观念：密码技术里所提到的信息安全性通常不是绝对的，它是一个相对的范畴。<span lang=\"EN-US\"><p /></span></span></p><p class=\"MsoPlainText\" style=\"MARGIN: 0cm 0cm 0pt; TEXT-INDENT: 21pt\"><span style=\"mso-bidi-font-family: 宋体; mso-hansi-font-family: 宋体\">一位密码学家曾经这样评论：如果你想让你的信息绝对安全的话，你得把你要保密的信息写下来装在保险柜里，把保险柜焊死，到太平洋海底某个不为人知的角落挖坑深埋，这样也许会接近绝对的安全。可是这样的安全是没有用的，因为这并不能让需要信息的人得到它。所以，这种“安全”是没有用的。实际上，这不能叫做“信息安全”，把它叫做“信息隐藏”也许更为合适。<span lang=\"EN-US\"><p /></span></span></p><p class=\"MsoPlainText\" style=\"MARGIN: 0cm 0cm 0pt; TEXT-INDENT: 21pt\"><span style=\"mso-bidi-font-family: 宋体; mso-hansi-font-family: 宋体\">我们所讨论的信息安全，是有使用价值的信息安全。这种安全是相对的安全。<span lang=\"EN-US\"><p /></span></span></p><p class=\"MsoPlainText\" style=\"MARGIN: 0cm 0cm 0pt; TEXT-INDENT: 21pt\"><span style=\"mso-bidi-font-family: 宋体; mso-hansi-font-family: 宋体\">不过“相对安全”并不意味着不安全。我们日常生活中用的锁其实也是相对的安全。事实上，密码算法的安全强度要比平常的锁的安全强度高出很多倍。<span lang=\"EN-US\"><p /></span></span></p><h2 style=\"MARGIN: 13pt 0cm 13pt 21pt; TEXT-INDENT: -21pt; tab-stops: list 21.0pt; mso-list: l0 level1 lfo1\"><span lang=\"EN-US\" style=\"mso-bidi-font-family: Arial; mso-fareast-font-family: Arial\"><span style=\"mso-list: Ignore\"><font face=\"Arial\">8.</font></span></span><span style=\"FONT-FAMILY: 黑体; mso-ascii-font-family: Arial\">相对的安全</span></h2><p class=\"MsoPlainText\" style=\"MARGIN: 0cm 0cm 0pt; TEXT-INDENT: 21pt\"><span style=\"mso-bidi-font-family: 宋体; mso-hansi-font-family: 宋体\">在数学家香农（<span lang=\"EN-US\">Claude E.Shanon</span>）创立的信息论中，用严格的数学方法证明了这么一个结论：一切密码算法，除了一次一密以外，在理论上都是可以破解的。这些密码算法，包括现在的和过去的，已知的和未知的，不管它多么复杂、多么先进，只要有足够强大的计算机，有足够多的密文，一定可以破译。<span lang=\"EN-US\"><p /></span></span></p><p class=\"MsoPlainText\" style=\"MARGIN: 0cm 0cm 0pt; TEXT-INDENT: 21pt\"><span style=\"mso-bidi-font-family: 宋体; mso-hansi-font-family: 宋体\">那么就产生了这样一个问题：既然这样，那密码还有什么用呢？<span lang=\"EN-US\"><p /></span></span></p><p class=\"MsoPlainText\" style=\"MARGIN: 0cm 0cm 0pt; TEXT-INDENT: 21pt\"><span style=\"mso-bidi-font-family: 宋体; mso-hansi-font-family: 宋体\">这就是为什么我们要讨论相对安全的原因。<span lang=\"EN-US\"><p /></span></span></p><p class=\"MsoPlainText\" style=\"MARGIN: 0cm 0cm 0pt; TEXT-INDENT: 21pt\"><span style=\"mso-bidi-font-family: 宋体; mso-hansi-font-family: 宋体\">前面提到了，一切密码，理论上都是可以破译的。但是，只有在拥有足够强大的计算机的情况下才有可能破译。在实际上，也许并不存在这么强的计算机。如果破译一个算法需要现在最强的计算机运算几百年，那么这样的算法即使理论上可以破译，在实践中也还是有实用价值的。<span lang=\"EN-US\"><p /></span></span></p><p class=\"MsoPlainText\" style=\"MARGIN: 0cm 0cm 0pt; TEXT-INDENT: 21pt\"><span style=\"mso-bidi-font-family: 宋体; mso-hansi-font-family: 宋体\">因此，我们可以这样理解相对安全的观念：假如一条信息需要保密<span lang=\"EN-US\">10</span>年，如果要花<span lang=\"EN-US\">20</span>年的时间才能破解它，那么信息就是安全的。否则就不安全。<span lang=\"EN-US\"><p /></span></span></p><p class=\"MsoPlainText\" style=\"MARGIN: 0cm 0cm 0pt; TEXT-INDENT: 21pt\"><span style=\"mso-bidi-font-family: 宋体; mso-hansi-font-family: 宋体\">在现实中，能获得的计算能力在一定程度上与付出的经济代价成比例。因此，也可以从经济的角度来衡量安全程度。假如一条信息价值一百万元，如果需要要花<span lang=\"EN-US\">1000</span>万元的代价才能制造出足够强的计算机来破解它，那它就是安全的。但是，如果信息价值<span lang=\"EN-US\">1000</span>万，用<span lang=\"EN-US\">100</span>万元就能获得足够的计算能力来破解它，那么它就是不安全的。<span lang=\"EN-US\"><p /></span></span></p><p class=\"MsoPlainText\" style=\"MARGIN: 0cm 0cm 0pt; TEXT-INDENT: 21pt\"><span lang=\"EN-US\" style=\"mso-bidi-font-family: 宋体; mso-hansi-font-family: 宋体\"><p> </p></span></p><h2 style=\"MARGIN: 13pt 0cm 13pt 21pt; TEXT-INDENT: -21pt; tab-stops: list 21.0pt; mso-list: l0 level1 lfo1\"><span lang=\"EN-US\" style=\"mso-bidi-font-family: Arial; mso-fareast-font-family: Arial\"><span style=\"mso-list: Ignore\"><font face=\"Arial\">9.</font></span></span><span style=\"FONT-FAMILY: 黑体; mso-ascii-font-family: Arial\">一次一密</span></h2><p class=\"MsoPlainText\" style=\"MARGIN: 0cm 0cm 0pt\"><span lang=\"EN-US\" style=\"mso-bidi-font-family: 宋体; mso-hansi-font-family: 宋体\"><span style=\"mso-tab-count: 1\">    </span></span><span style=\"mso-bidi-font-family: 宋体; mso-hansi-font-family: 宋体\">前面提到除了一次一密以外，其它的密码理论上都是可以破解的。那么什么是一次一密呢？一次一密就是每一次加密都使用一个不同的密钥（废话，和没说一样</span><span lang=\"EN-US\" style=\"FONT-FAMILY: Wingdings; mso-bidi-font-family: 宋体; mso-hansi-font-family: 宋体; mso-ascii-font-family: 宋体; mso-char-type: symbol; mso-symbol-font-family: Wingdings\"><span style=\"mso-char-type: symbol; mso-symbol-font-family: Wingdings\">J</span></span><span style=\"mso-bidi-font-family: 宋体; mso-hansi-font-family: 宋体\">）。严格的说，满足以下条件的密码才是真正的一次一密：<span lang=\"EN-US\"><p /></span></span></p><p class=\"MsoPlainText\" style=\"MARGIN: 0cm 0cm 0pt 21pt\"><span lang=\"EN-US\" style=\"mso-bidi-font-family: 宋体; mso-hansi-font-family: 宋体\">a</span><span style=\"mso-bidi-font-family: 宋体; mso-hansi-font-family: 宋体\">、密钥是随机产生的，并且必须是真随机数，而不是伪随机数；<span lang=\"EN-US\"><br />b</span>、密钥不能重复使用；<span lang=\"EN-US\"><br />c</span>、密钥的有效长度不小于密文的长度。<span lang=\"EN-US\"><p /></span></span></p><p class=\"MsoPlainText\" style=\"MARGIN: 0cm 0cm 0pt; TEXT-INDENT: 21pt\"><span style=\"mso-bidi-font-family: 宋体; mso-hansi-font-family: 宋体\">一次一密是最安全的加密算法，双方一旦安全交换了密钥，之后交换信息的过程就是安全的。这种算法一直在一些要求高度机密的场合使用，据说美国和前苏联之间的热线电话、前苏联的间谍都是使用一次一密的方式加密的。不管有多强的超级计算机，不管超级计算机工作多久，也不管多少人，用什么方法和技术，具有多大的计算能力，都不可能破解用一次一密方法加密的信息，除非回到那个时代拿到他用过的密码本（也就是密钥）。前苏联间谍用一次一密方法加密过的信息将成为永久的谜。<span lang=\"EN-US\"><p /></span></span></p><h2 style=\"MARGIN: 13pt 0cm 13pt 21pt; TEXT-INDENT: -21pt; tab-stops: list 21.0pt; mso-list: l0 level1 lfo1\"><span lang=\"EN-US\" style=\"mso-bidi-font-family: Arial; mso-fareast-font-family: Arial\"><span style=\"mso-list: Ignore\"><font face=\"Arial\">10.</font></span></span><span style=\"FONT-FAMILY: 黑体; mso-ascii-font-family: Arial\">对称算法的概念</span></h2><p class=\"MsoPlainText\" style=\"MARGIN: 0cm 0cm 0pt; TEXT-INDENT: 21pt\"><span style=\"FONT-SIZE: 10.5pt; FONT-FAMILY: 宋体; mso-bidi-font-family: 宋体; mso-ascii-font-family: \'Times New Roman\'; mso-bidi-font-size: 12.0pt; mso-font-kerning: 1.0pt; mso-ansi-language: EN-US; mso-fareast-language: ZH-CN; mso-bidi-language: AR-SA\">所谓对称算法就是指加密和解密过程均采用同一把密钥。如</span><span lang=\"EN-US\" style=\"FONT-SIZE: 10.5pt; FONT-FAMILY: \'Times New Roman\'; mso-bidi-font-family: 宋体; mso-hansi-font-family: 宋体; mso-fareast-font-family: 宋体; mso-bidi-font-size: 12.0pt; mso-font-kerning: 1.0pt; mso-ansi-language: EN-US; mso-fareast-language: ZH-CN; mso-bidi-language: AR-SA\">DES,3DES,AES</span><span style=\"FONT-SIZE: 10.5pt; FONT-FAMILY: 宋体; mso-bidi-font-family: 宋体; mso-ascii-font-family: \'Times New Roman\'; mso-bidi-font-size: 12.0pt; mso-font-kerning: 1.0pt; mso-ansi-language: EN-US; mso-fareast-language: ZH-CN; mso-bidi-language: AR-SA\">等算法都属于对称算法。下面会对这几种有代表性的算法一一做介绍。</span></p><span lang=\"EN-US\" style=\"mso-bidi-font-family: 宋体; mso-hansi-font-family: 宋体\"><p><a title=\"点击图片看全图\" href=\"http://www.flagware.net/uploadfile/001.jpg\" target=\"_blank\"><p align=\"center\"><img alt=\"\" src=\"http://www.flagware.net/uploadfile/001.jpg\" onload=\"function anonymous()<br>&leftsign;<br>if(this.width>screen.width-333)this.width=screen.width-333<br>&rightsign;\" border=\"0\" /></p><h2 style=\"MARGIN: 13pt 0cm 13pt 21pt; TEXT-INDENT: -21pt; tab-stops: list 21.0pt; mso-list: l0 level1 lfo1\"><span lang=\"EN-US\" style=\"mso-bidi-font-family: Arial; mso-fareast-font-family: Arial\"><span style=\"mso-list: Ignore\"><font face=\"Arial\">11.</font></span></span><span lang=\"EN-US\"><font face=\"Arial\">DES</font></span><span style=\"FONT-FAMILY: 黑体; mso-ascii-font-family: Arial\">算法</span><span lang=\"EN-US\"><font face=\"Arial\"> </font></span></h2><p class=\"MsoPlainText\" style=\"MARGIN: 0cm 0cm 0pt; TEXT-INDENT: 21pt\"><font size=\"3\"><span lang=\"EN-US\" style=\"mso-bidi-font-family: 宋体; mso-hansi-font-family: 宋体\">DES</span><span style=\"mso-bidi-font-family: 宋体; mso-hansi-font-family: 宋体\">（<span lang=\"EN-US\">Data Encryption Standard</span>）是一种经典的对称算法。其数据分组长度为<span lang=\"EN-US\">64</span>位，使用的密钥为<span lang=\"EN-US\">64</span>位，有效密钥长度为<span lang=\"EN-US\">56</span>位（有<span lang=\"EN-US\">8</span>位用于奇偶校验）。</span><span class=\"p11b1\"><span style=\"FONT-SIZE: 10pt\">它由<span lang=\"EN-US\">IBM</span>公司在<span lang=\"EN-US\">70</span>年代开发，经过政府的加密标准筛选后，于<span lang=\"EN-US\">1976</span>年<span lang=\"EN-US\">11</span>月被美国政府采用，随后被美国国家标准局和美国国家标准协会<span lang=\"EN-US\">(American National Standard Institute</span>，<span lang=\"EN-US\"> ANSI) </span>承认。</span></span></font><span lang=\"EN-US\" style=\"mso-bidi-font-family: 宋体; mso-hansi-font-family: 宋体\"><p /></span></p><p class=\"MsoPlainText\" style=\"MARGIN: 0cm 0cm 0pt; TEXT-INDENT: 21pt\"><span style=\"mso-bidi-font-family: 宋体; mso-hansi-font-family: 宋体\"><font size=\"3\">该技术算法公开，在各行业有着广泛的应用。<span lang=\"EN-US\">DES</span>算法从公布到现在已有<span lang=\"EN-US\">20</span>多年的历史，随着计算机能力的飞速发展，<span lang=\"EN-US\">DES</span>的<span lang=\"EN-US\">56</span>位密钥长度显得有些短了。现在，已经有可能通过穷举的方法来对其进行攻击。但是除此以外，还没有发现穷举以外的能有效破译<span lang=\"EN-US\">DES</span>的方法。　<span lang=\"EN-US\"><p /></span></font></span></p><p align=\"left\"><span lang=\"EN-US\" style=\"FONT-SIZE: 10.5pt; FONT-FAMILY: \'Times New Roman\'; mso-bidi-font-family: 宋体; mso-hansi-font-family: 宋体; mso-fareast-font-family: 宋体; mso-bidi-font-size: 12.0pt; mso-font-kerning: 1.0pt; mso-ansi-language: EN-US; mso-fareast-language: ZH-CN; mso-bidi-language: AR-SA\">DES</span><span style=\"FONT-SIZE: 10.5pt; FONT-FAMILY: 宋体; mso-bidi-font-family: 宋体; mso-ascii-font-family: \'Times New Roman\'; mso-bidi-font-size: 12.0pt; mso-font-kerning: 1.0pt; mso-ansi-language: EN-US; mso-fareast-language: ZH-CN; mso-bidi-language: AR-SA\">算法的数据流程图如下图所示：</span></p><span style=\"FONT-SIZE: 10.5pt; FONT-FAMILY: 宋体; mso-bidi-font-family: 宋体; mso-ascii-font-family: \'Times New Roman\'; mso-bidi-font-size: 12.0pt; mso-font-kerning: 1.0pt; mso-ansi-language: EN-US; mso-fareast-language: ZH-CN; mso-bidi-language: AR-SA\"><a title=\"点击图片看全图\" href=\"http://www.flagware.net/uploadfile/002.jpg\" target=\"_blank\"><p align=\"center\"><img alt=\"\" src=\"http://www.flagware.net/uploadfile/002.jpg\" onload=\"function anonymous()<br>&leftsign;<br>if(this.width>screen.width-333)this.width=screen.width-333<br>&rightsign;\" border=\"0\" /></p><h2 style=\"MARGIN: 13pt 0cm 13pt 21pt; TEXT-INDENT: -21pt; tab-stops: list 21.0pt; mso-list: l0 level1 lfo1\"><span lang=\"EN-US\" style=\"mso-bidi-font-family: Arial; mso-hansi-font-family: 宋体; mso-fareast-font-family: Arial\"><span style=\"mso-list: Ignore\"><font face=\"Arial\">12.</font></span></span><span style=\"FONT-FAMILY: 黑体; mso-ascii-font-family: Arial\">三重</span><font face=\"Arial\"><span lang=\"EN-US\">DES </span><span lang=\"EN-US\" style=\"mso-bidi-font-family: 宋体; mso-hansi-font-family: 宋体\"><p /></span></font></h2><p class=\"MsoPlainText\" style=\"MARGIN: 0cm 0cm 0pt; TEXT-INDENT: 21pt\"><span class=\"p11b1\"><span lang=\"EN-US\" style=\"FONT-SIZE: 10pt\">DES</span></span><span class=\"p11b1\"><span style=\"FONT-SIZE: 10pt\">算法现在已经不能提供足够的安全性，因为其有效密钥只有<span lang=\"EN-US\">56</span>位。因此，后来又提出了三重<span lang=\"EN-US\">DES</span>（或称<span lang=\"EN-US\">3DES</span>），该方法的强度大约和<span lang=\"EN-US\">112</span>比特的密钥强度相当。 <span lang=\"EN-US\"><p /></span></span></span></p><p><span class=\"p11b1\"><span style=\"FONT-SIZE: 10pt; FONT-FAMILY: 宋体; mso-bidi-font-family: \'Courier New\'; mso-hansi-font-family: \'Courier New\'; mso-ascii-font-family: \'Times New Roman\'; mso-font-kerning: 1.0pt; mso-ansi-language: EN-US; mso-fareast-language: ZH-CN; mso-bidi-language: AR-SA\">这种方法用两个密钥对明文进行三次运算。设两个密钥是</span><span lang=\"EN-US\" style=\"FONT-SIZE: 10pt; FONT-FAMILY: \'Times New Roman\'; mso-bidi-font-family: \'Courier New\'; mso-hansi-font-family: \'Courier New\'; mso-fareast-font-family: 宋体; mso-font-kerning: 1.0pt; mso-ansi-language: EN-US; mso-fareast-language: ZH-CN; mso-bidi-language: AR-SA\">K1</span><span style=\"FONT-SIZE: 10pt; FONT-FAMILY: 宋体; mso-bidi-font-family: \'Courier New\'; mso-hansi-font-family: \'Courier New\'; mso-ascii-font-family: \'Times New Roman\'; mso-font-kerning: 1.0pt; mso-ansi-language: EN-US; mso-fareast-language: ZH-CN; mso-bidi-language: AR-SA\">和</span><span lang=\"EN-US\" style=\"FONT-SIZE: 10pt; FONT-FAMILY: \'Times New Roman\'; mso-bidi-font-family: \'Courier New\'; mso-hansi-font-family: \'Courier New\'; mso-fareast-font-family: 宋体; mso-font-kerning: 1.0pt; mso-ansi-language: EN-US; mso-fareast-language: ZH-CN; mso-bidi-language: AR-SA\">K2</span><span style=\"FONT-SIZE: 10pt; FONT-FAMILY: 宋体; mso-bidi-font-family: \'Courier New\'; mso-hansi-font-family: \'Courier New\'; mso-ascii-font-family: \'Times New Roman\'; mso-font-kerning: 1.0pt; mso-ansi-language: EN-US; mso-fareast-language: ZH-CN; mso-bidi-language: AR-SA\">，其算法的步骤如图所示：</span></span></p><span class=\"p11b1\"><span style=\"FONT-SIZE: 10pt; FONT-FAMILY: 宋体; mso-bidi-font-family: \'Courier New\'; mso-hansi-font-family: \'Courier New\'; mso-ascii-font-family: \'Times New Roman\'; mso-font-kerning: 1.0pt; mso-ansi-language: EN-US; mso-fareast-language: ZH-CN; mso-bidi-language: AR-SA\"><a title=\"点击图片看全图\" href=\"http://www.flagware.net/uploadfile/003.jpg\" target=\"_blank\"><p align=\"center\"><img alt=\"\" src=\"http://www.flagware.net/uploadfile/003.jpg\" onload=\"function anonymous()<br>&leftsign;<br>if(this.width>screen.width-333)this.width=screen.width-333<br>&rightsign;\" border=\"0\" /></p><p class=\"MsoNormal\" style=\"MARGIN: 0cm 0cm 0pt; TEXT-INDENT: 21pt; LINE-HEIGHT: 16pt; TEXT-ALIGN: left; mso-pagination: widow-orphan\" align=\"left\"><span class=\"p11b1\"><span lang=\"EN-US\" style=\"FONT-SIZE: 10pt; mso-bidi-font-family: \'Courier New\'; mso-hansi-font-family: \'Courier New\'\"><p><font face=\"Times New Roman\"> </font></p></span></span></p><p class=\"MsoPlainText\" style=\"MARGIN: 0cm 0cm 0pt; TEXT-INDENT: 21pt\"><span class=\"p11b1\"><span lang=\"EN-US\" style=\"FONT-SIZE: 10pt\">1. </span></span><span class=\"p11b1\"><span style=\"FONT-SIZE: 10pt\">用密钥<span lang=\"EN-US\">K1</span>进行<span lang=\"EN-US\">DES</span>加密。<span lang=\"EN-US\"> <br /></span>　　<span lang=\"EN-US\">2. </span>用<span lang=\"EN-US\">K2</span>对步骤<span lang=\"EN-US\">1</span>的结果进行<span lang=\"EN-US\">DES</span>解密。<span lang=\"EN-US\"> <br /></span>　　<span lang=\"EN-US\">3. </span>用步骤<span lang=\"EN-US\">2</span>的结果使用密钥<span lang=\"EN-US\">K1</span>进行<span lang=\"EN-US\">DES</span>加密。 </span></span></p><span class=\"p11b1\"><span style=\"FONT-SIZE: 10pt\"><h2 style=\"MARGIN: 13pt 0cm 13pt 21pt; TEXT-INDENT: -21pt; tab-stops: list 21.0pt; mso-list: l0 level1 lfo1\"><span lang=\"EN-US\" style=\"mso-bidi-font-family: Arial; mso-fareast-font-family: Arial\"><span style=\"mso-list: Ignore\"><font face=\"Arial\">13.</font></span></span><span lang=\"EN-US\"><font face=\"Arial\">AES</font></span><span style=\"FONT-FAMILY: 黑体; mso-ascii-font-family: Arial\">算法</span></h2><p class=\"MsoPlainText\" style=\"MARGIN: 0cm 0cm 0pt; TEXT-INDENT: 21pt\"><span class=\"p11b1\"><span lang=\"EN-US\" style=\"FONT-SIZE: 10pt\">1997</span></span><span class=\"p11b1\"><span style=\"FONT-SIZE: 10pt\">年<span lang=\"EN-US\">1</span>月美国国家标准和技术研究所（<span lang=\"EN-US\">NIST</span>）宣布征集新的加密算法。<chsdate w:st=\"on\" isrocdate=\"False\" islunardate=\"False\" day=\"2\" month=\"10\" year=\"2000\"><span lang=\"EN-US\">2000</span>年<span lang=\"EN-US\">10</span>月<span lang=\"EN-US\">2</span>日</chsdate>，由比利时设计者<span lang=\"EN-US\">Joan Daemen</span>和<span lang=\"EN-US\">Vincent Rijmen</span>设计的<span lang=\"EN-US\">Rijndael</span>算法以其优秀的性能和抗攻击能力，最终赢得了胜利，成为新一代的加密标准<span lang=\"EN-US\">AES(Advanced Encryption Standard)</span>。<span lang=\"EN-US\"><p /></span></span></span></p><p class=\"MsoPlainText\" style=\"MARGIN: 0cm 0cm 0pt; TEXT-INDENT: 21pt\"><span class=\"p11b1\"><span lang=\"EN-US\" style=\"FONT-SIZE: 10pt\">Rijndael</span></span><span class=\"p11b1\"><span style=\"FONT-SIZE: 10pt\">加密：<span lang=\"EN-US\"><p /></span></span></span></p><p class=\"MsoPlainText\" style=\"MARGIN: 0cm 0cm 0pt; TEXT-INDENT: 21pt\"><span class=\"p11b1\"><span lang=\"EN-US\" style=\"FONT-SIZE: 10pt\">Rijndael</span></span><span class=\"p11b1\"><span style=\"FONT-SIZE: 10pt\">是一个密钥迭代分组密码，包含了轮变换对状态的重复作用。轮数<span lang=\"EN-US\">Nr </span>的值取决于分组和密钥的长度。对于<span lang=\"EN-US\">AES</span>，当密钥长度为<span lang=\"EN-US\">128</span>比特时，<span lang=\"EN-US\">Nr =10</span>；当密钥长度为<span lang=\"EN-US\">192</span>比特时，<span lang=\"EN-US\">Nr =12</span>；当密钥长度为<span lang=\"EN-US\">256</span>比特时，<span lang=\"EN-US\">Nr =14</span>。<span lang=\"EN-US\"><p /></span></span></span></p><p class=\"MsoPlainText\" style=\"MARGIN: 0cm 0cm 0pt; TEXT-INDENT: 21pt\"><span class=\"p11b1\"><span lang=\"EN-US\" style=\"FONT-SIZE: 10pt; FONT-FAMILY: \'Times New Roman\'; mso-fareast-font-family: 宋体; mso-font-kerning: 1.0pt; mso-ansi-language: EN-US; mso-fareast-language: ZH-CN; mso-bidi-language: AR-SA\">Rijndael</span><span style=\"FONT-SIZE: 10pt; FONT-FAMILY: 宋体; mso-bidi-font-family: \'Times New Roman\'; mso-hansi-font-family: \'Times New Roman\'; mso-ascii-font-family: \'Times New Roman\'; mso-font-kerning: 1.0pt; mso-ansi-language: EN-US; mso-fareast-language: ZH-CN; mso-bidi-language: AR-SA\">算法的加密过程如图</span><span lang=\"EN-US\" style=\"FONT-SIZE: 10pt; FONT-FAMILY: \'Times New Roman\'; mso-fareast-font-family: 宋体; mso-font-kerning: 1.0pt; mso-ansi-language: EN-US; mso-fareast-language: ZH-CN; mso-bidi-language: AR-SA\">1</span><span style=\"FONT-SIZE: 10pt; FONT-FAMILY: 宋体; mso-bidi-font-family: \'Times New Roman\'; mso-hansi-font-family: \'Times New Roman\'; mso-ascii-font-family: \'Times New Roman\'; mso-font-kerning: 1.0pt; mso-ansi-language: EN-US; mso-fareast-language: ZH-CN; mso-bidi-language: AR-SA\">所示。它包括一个初始密钥加法，记作</span><span lang=\"EN-US\" style=\"FONT-SIZE: 10pt; FONT-FAMILY: \'Times New Roman\'; mso-fareast-font-family: 宋体; mso-font-kerning: 1.0pt; mso-ansi-language: EN-US; mso-fareast-language: ZH-CN; mso-bidi-language: AR-SA\">AddRoundKey</span><span style=\"FONT-SIZE: 10pt; FONT-FAMILY: 宋体; mso-bidi-font-family: \'Times New Roman\'; mso-hansi-font-family: \'Times New Roman\'; mso-ascii-font-family: \'Times New Roman\'; mso-font-kerning: 1.0pt; mso-ansi-language: EN-US; mso-fareast-language: ZH-CN; mso-bidi-language: AR-SA\">，接着进行</span><span lang=\"EN-US\" style=\"FONT-SIZE: 10pt; FONT-FAMILY: \'Times New Roman\'; mso-fareast-font-family: 宋体; mso-font-kerning: 1.0pt; mso-ansi-language: EN-US; mso-fareast-language: ZH-CN; mso-bidi-language: AR-SA\">Nr-1</span><span style=\"FONT-SIZE: 10pt; FONT-FAMILY: 宋体; mso-bidi-font-family: \'Times New Roman\'; mso-hansi-font-family: \'Times New Roman\'; mso-ascii-font-family: \'Times New Roman\'; mso-font-kerning: 1.0pt; mso-ansi-language: EN-US; mso-fareast-language: ZH-CN; mso-bidi-language: AR-SA\">次轮变换</span><span lang=\"EN-US\" style=\"FONT-SIZE: 10pt; FONT-FAMILY: \'Times New Roman\'; mso-fareast-font-family: 宋体; mso-font-kerning: 1.0pt; mso-ansi-language: EN-US; mso-fareast-language: ZH-CN; mso-bidi-language: AR-SA\">(Round)</span><span style=\"FONT-SIZE: 10pt; FONT-FAMILY: 宋体; mso-bidi-font-family: \'Times New Roman\'; mso-hansi-font-family: \'Times New Roman\'; mso-ascii-font-family: \'Times New Roman\'; mso-font-kerning: 1.0pt; mso-ansi-language: EN-US; mso-fareast-language: ZH-CN; mso-bidi-language: AR-SA\">，最后再使用一个轮变换</span><span lang=\"EN-US\" style=\"FONT-SIZE: 10pt; FONT-FAMILY: \'Times New Roman\'; mso-fareast-font-family: 宋体; mso-font-kerning: 1.0pt; mso-ansi-language: EN-US; mso-fareast-language: ZH-CN; mso-bidi-language: AR-SA\">(FinalRound)</span><span style=\"FONT-SIZE: 10pt; FONT-FAMILY: 宋体; mso-bidi-font-family: \'Times New Roman\'; mso-hansi-font-family: \'Times New Roman\'; mso-ascii-font-family: \'Times New Roman\'; mso-font-kerning: 1.0pt; mso-ansi-language: EN-US; mso-fareast-language: ZH-CN; mso-bidi-language: AR-SA\">。</span></span></p><span class=\"p11b1\"><span style=\"FONT-SIZE: 10pt; FONT-FAMILY: 宋体; mso-bidi-font-family: \'Times New Roman\'; mso-hansi-font-family: \'Times New Roman\'; mso-ascii-font-family: \'Times New Roman\'; mso-font-kerning: 1.0pt; mso-ansi-language: EN-US; mso-fareast-language: ZH-CN; mso-bidi-language: AR-SA\"><a title=\"点击图片看全图\" href=\"http://www.flagware.net/uploadfile/004.jpg\" target=\"_blank\"><p align=\"center\"><img alt=\"\" src=\"http://www.flagware.net/uploadfile/004.jpg\" onload=\"function anonymous()<br>&leftsign;<br>if(this.width>screen.width-333)this.width=screen.width-333<br>&rightsign;\" border=\"0\" /></p><p class=\"MsoPlainText\" style=\"MARGIN: 0cm 0cm 0pt; TEXT-INDENT: 21pt\"><span class=\"p11b1\"><span style=\"FONT-SIZE: 10pt\"></span></span> </p><p class=\"MsoPlainText\" style=\"MARGIN: 0cm 0cm 0pt; TEXT-INDENT: 21pt\"><span class=\"p11b1\"><span style=\"FONT-SIZE: 10pt\">轮变换由<span lang=\"EN-US\">4</span>个步骤组成：<span lang=\"EN-US\">SubBytes</span>，<span lang=\"EN-US\">ShiftRows</span>，<span lang=\"EN-US\">MixColumns</span>和<span lang=\"EN-US\">AddRoundKey</span>。最后一轮与前<span lang=\"EN-US\">Nr -1</span>次轮变换稍有不同，省掉了其中的<span lang=\"EN-US\">MixColumns</span>步骤。<span lang=\"EN-US\"><p /></span></span></span></p><p class=\"MsoPlainText\" style=\"MARGIN: 0cm 0cm 0pt; TEXT-INDENT: 21pt\"><span class=\"p11b1\"><span style=\"FONT-SIZE: 10pt\">步骤<span lang=\"EN-US\">SubBytes</span>是<span lang=\"EN-US\">Rijndael</span>算法中唯一的非线性变换。<span lang=\"EN-US\"><p /></span></span></span></p><p class=\"MsoPlainText\" style=\"MARGIN: 0cm 0cm 0pt; TEXT-INDENT: 21pt\"><span class=\"p11b1\"><span style=\"FONT-SIZE: 10pt\">步骤<span lang=\"EN-US\">ShiftRows</span>是一个字节换位，它将状态中的行按照不同的偏移量进行循环移位。使第<span lang=\"EN-US\">i </span>行第<span lang=\"EN-US\">j </span>位的字节移动到位置（<span lang=\"EN-US\">j -Ci</span>）<span lang=\"EN-US\">mod Nb</span>，移动偏移量<span lang=\"EN-US\">Ci </span>的值依赖于<span lang=\"EN-US\">Nb </span>的取值。其中<span lang=\"EN-US\">Nb =</span>分组长度<span lang=\"EN-US\">/32</span>，对于<span lang=\"EN-US\">AES</span>，<span lang=\"EN-US\">Nb </span>取固定长度<span lang=\"EN-US\">4</span>。<span lang=\"EN-US\"><p /></span></span></span></p><p class=\"MsoPlainText\" style=\"MARGIN: 0cm 0cm 0pt; TEXT-INDENT: 21pt\"><span class=\"p11b1\"><span style=\"FONT-SIZE: 10pt\">步骤<span lang=\"EN-US\">MixColumns</span>是作用在状态各列的置换算法。<span lang=\"EN-US\"><p /></span></span></span></p><p class=\"MsoPlainText\" style=\"MARGIN: 0cm 0cm 0pt; TEXT-INDENT: 21pt\"><span class=\"p11b1\"><span style=\"FONT-SIZE: 10pt\">密钥加法<span lang=\"EN-US\">AddRoundKey</span>将状态与一个轮密钥进行异或。轮密钥是由密码密钥通过密钥编排方案<span lang=\"EN-US\">[1]</span>导出。轮密钥的长度等于分组的长度。<span lang=\"EN-US\"><p /></span></span></span></p><p class=\"MsoPlainText\" style=\"MARGIN: 0cm 0cm 0pt; TEXT-INDENT: 21pt\"><span class=\"p11b1\"><span lang=\"EN-US\" style=\"FONT-SIZE: 10pt\">Rijndael</span></span><span class=\"p11b1\"><span style=\"FONT-SIZE: 10pt\">解密<span lang=\"EN-US\">:<p /></span></span></span></p><p class=\"MsoPlainText\" style=\"MARGIN: 0cm 0cm 0pt; TEXT-INDENT: 21pt\"><span class=\"p11b1\"><span lang=\"EN-US\" style=\"FONT-SIZE: 10pt\">Rijndael</span></span><span class=\"p11b1\"><span style=\"FONT-SIZE: 10pt\">解密算法有<span lang=\"EN-US\">2</span>种形式。一种是直接解密算法，即直接利用步骤<span lang=\"EN-US\">InsubBytes</span>，<span lang=\"EN-US\">InvShiftRows</span>，<span lang=\"EN-US\">InvMixColumns</span>和<span lang=\"EN-US\">AddRoundKey</span>的逆并倒置其次序对数据进行解密。<span lang=\"EN-US\"><p /></span></span></span></p><p class=\"MsoPlainText\" style=\"MARGIN: 0cm 0cm 0pt; TEXT-INDENT: 21pt\"><span class=\"p11b1\"><span style=\"FONT-SIZE: 10pt\">另一种是等价解密算法，其实现原理如图<span lang=\"EN-US\">2</span>所示。等价解密算法有利于有效实现良好的运算次序。<span lang=\"EN-US\"><p /></span></span></span></p><a title=\"点击图片看全图\" href=\"http://www.flagware.net/uploadfile/005.jpg\" target=\"_blank\"><p align=\"center\"><img alt=\"\" src=\"http://www.flagware.net/uploadfile/005.jpg\" onload=\"function anonymous()<br>&leftsign;<br>if(this.width>screen.width-333)this.width=screen.width-333<br>&rightsign;\" border=\"0\" /></p><h2 style=\"MARGIN: 13pt 0cm 13pt 21pt; TEXT-INDENT: -21pt; tab-stops: list 21.0pt; mso-list: l0 level1 lfo1\"><span lang=\"EN-US\" style=\"mso-bidi-font-family: Arial; mso-fareast-font-family: Arial\"><span style=\"mso-list: Ignore\"><font face=\"Arial\">14.</font></span></span><span style=\"FONT-FAMILY: 黑体; mso-ascii-font-family: Arial\">非对称算法的概念</span></h2><p class=\"MsoPlainText\" style=\"MARGIN: 0cm 0cm 0pt; TEXT-INDENT: 21pt\"><span style=\"mso-bidi-font-family: 宋体; mso-hansi-font-family: 宋体\"><font size=\"3\">所谓非对称算法就是指加密和解密用的不是同一个密钥。<span lang=\"EN-US\"><p /></span></font></span></p><p class=\"MsoPlainText\" style=\"MARGIN: 0cm 0cm 0pt; TEXT-INDENT: 21pt\"><span style=\"mso-bidi-font-family: 宋体; mso-hansi-font-family: 宋体\"><font size=\"3\">非对称算法的密钥分为二部分，通常称为“公钥”和“私钥”（或者称为“公开密钥”和“秘密密钥”）。公钥和私钥存在数学上的关系，使得用公钥加密的数据只能用对应的私钥解密，用私钥加密的数据只能用对应的公钥解密。但是从公钥中推导出私钥是很难的（理论上是可以推导出来的，但是实际上找不到这么强的计算能力）。<span lang=\"EN-US\"><p /></span></font></span></p><p class=\"MsoPlainText\" style=\"MARGIN: 0cm 0cm 0pt; TEXT-INDENT: 21pt\"><span lang=\"EN-US\" style=\"FONT-SIZE: 10.5pt; FONT-FAMILY: \'Times New Roman\'; mso-bidi-font-family: 宋体; mso-hansi-font-family: 宋体; mso-fareast-font-family: 宋体; mso-bidi-font-size: 12.0pt; mso-font-kerning: 1.0pt; mso-ansi-language: EN-US; mso-fareast-language: ZH-CN; mso-bidi-language: AR-SA\">RSA,DSA</span><span style=\"FONT-SIZE: 10.5pt; FONT-FAMILY: 宋体; mso-bidi-font-family: 宋体; mso-ascii-font-family: \'Times New Roman\'; mso-bidi-font-size: 12.0pt; mso-font-kerning: 1.0pt; mso-ansi-language: EN-US; mso-fareast-language: ZH-CN; mso-bidi-language: AR-SA\">等算法属于非对称算法。</span></p><span style=\"FONT-SIZE: 10.5pt; FONT-FAMILY: 宋体; mso-bidi-font-family: 宋体; mso-ascii-font-family: \'Times New Roman\'; mso-bidi-font-size: 12.0pt; mso-font-kerning: 1.0pt; mso-ansi-language: EN-US; mso-fareast-language: ZH-CN; mso-bidi-language: AR-SA\"><a title=\"点击图片看全图\" href=\"http://www.flagware.net/uploadfile/006.jpg\" target=\"_blank\"><p align=\"center\"><img alt=\"\" src=\"http://www.flagware.net/uploadfile/006.jpg\" onload=\"function anonymous()<br>&leftsign;<br>if(this.width>screen.width-333)this.width=screen.width-333<br>&rightsign;\" border=\"0\" /></p><h2 style=\"MARGIN: 13pt 0cm 13pt 21pt; TEXT-INDENT: -21pt; tab-stops: list 21.0pt; mso-list: l0 level1 lfo1\"><span lang=\"EN-US\" style=\"mso-bidi-font-family: Arial; mso-fareast-font-family: Arial\"><span style=\"mso-list: Ignore\"><font face=\"Arial\">15.</font></span></span><span lang=\"EN-US\"><font face=\"Arial\">RSA</font></span><span style=\"FONT-FAMILY: 黑体; mso-ascii-font-family: Arial\">算法</span><span lang=\"EN-US\"><font face=\"Arial\"> </font></span></h2><p class=\"MsoPlainText\" style=\"MARGIN: 0cm 0cm 0pt; TEXT-INDENT: 21pt\"><span lang=\"EN-US\" style=\"mso-bidi-font-family: 宋体; mso-hansi-font-family: 宋体\">RSA</span><span style=\"mso-bidi-font-family: 宋体; mso-hansi-font-family: 宋体\">算法是第一个能同时用于加密和数字签名的算法，也易于理解和操作。<span lang=\"EN-US\">RSA</span>是被研究得最广泛的公钥算法，从<span lang=\"EN-US\">1978</span>年提出到现在已近三十年，经历了各种攻击的考验，逐渐为人们接受，普遍认为是目前最优秀的公钥方案之一。通常认为破译<span lang=\"EN-US\">RSA</span>的难度与大数分解难度等价。算法以三个发明者的名字命名：<span lang=\"EN-US\">Ron Rivest, Adi Shamir </span>和<span lang=\"EN-US\">Leonard Adleman</span>。<span lang=\"EN-US\"><p /></span></span></p><p class=\"MsoPlainText\" style=\"MARGIN: 0cm 0cm 0pt; TEXT-INDENT: 21pt\"><span lang=\"EN-US\" style=\"mso-bidi-font-family: 宋体; mso-hansi-font-family: 宋体\">RSA</span><span style=\"mso-bidi-font-family: 宋体; mso-hansi-font-family: 宋体\">算法的原理：<span lang=\"EN-US\"><p /></span></span></p><p class=\"MsoPlainText\" style=\"MARGIN: 0cm 0cm 0pt; TEXT-INDENT: 21pt\"><span lang=\"EN-US\" style=\"mso-bidi-font-family: 宋体; mso-hansi-font-family: 宋体\">1</span><span style=\"mso-bidi-font-family: 宋体; mso-hansi-font-family: 宋体\">、密钥对的产生：<span lang=\"EN-US\"><p /></span></span></p><p class=\"MsoPlainText\" style=\"MARGIN: 0cm 0cm 0pt 21pt\"><span style=\"mso-bidi-font-family: 宋体; mso-hansi-font-family: 宋体\">选择两个大素数，<span lang=\"EN-US\">p </span>和<span lang=\"EN-US\">q </span>。计算：<span lang=\"EN-US\"> <br />n = p * q<p /></span></span></p><p class=\"MsoPlainText\" style=\"MARGIN: 0cm 0cm 0pt; TEXT-INDENT: 21pt\"><span style=\"mso-bidi-font-family: 宋体; mso-hansi-font-family: 宋体\">然后随机选择加密密钥<span lang=\"EN-US\">e</span>，要求<span lang=\"EN-US\"> e </span>和<span lang=\"EN-US\"> ( p - 1 ) * ( q - 1 ) </span>互质。最后，利用<span lang=\"EN-US\"><br />Euclid </span>算法计算解密密钥<span lang=\"EN-US\">d, </span>使其满足 <span lang=\"EN-US\"><p /></span></span></p><p class=\"MsoPlainText\" style=\"MARGIN: 0cm 0cm 0pt; TEXT-INDENT: 21pt\"><span lang=\"EN-US\" style=\"mso-bidi-font-family: 宋体; mso-hansi-font-family: 宋体\">e * d = 1 ( mod ( p - 1 ) * ( q - 1 ) )<p /></span></p><p class=\"MsoPlainText\" style=\"MARGIN: 0cm 0cm 0pt; TEXT-INDENT: 21pt\"><span style=\"mso-bidi-font-family: 宋体; mso-hansi-font-family: 宋体\">其中<span lang=\"EN-US\">n</span>和<span lang=\"EN-US\">d</span>要互质。数<span lang=\"EN-US\">e</span>和<span lang=\"EN-US\">n</span>是公钥，<span lang=\"EN-US\">d</span>是私钥。两个素数<span lang=\"EN-US\">p</span>和<span lang=\"EN-US\">q</span>不再需要，应该丢弃，不要让任何人知道。 <span lang=\"EN-US\"><p /></span></span></p><p class=\"MsoPlainText\" style=\"MARGIN: 0cm 0cm 0pt; TEXT-INDENT: 21pt\"><span lang=\"EN-US\" style=\"mso-bidi-font-family: 宋体; mso-hansi-font-family: 宋体\"><p> </p></span></p><p class=\"MsoPlainText\" style=\"MARGIN: 0cm 0cm 0pt; TEXT-INDENT: 21pt\"><span lang=\"EN-US\" style=\"mso-bidi-font-family: 宋体; mso-hansi-font-family: 宋体\">2</span><span style=\"mso-bidi-font-family: 宋体; mso-hansi-font-family: 宋体\">、加密<span lang=\"EN-US\"><p /></span></span></p><p class=\"MsoPlainText\" style=\"MARGIN: 0cm 0cm 0pt; TEXT-INDENT: 21pt\"><span style=\"mso-bidi-font-family: 宋体; mso-hansi-font-family: 宋体\">加密信息<span lang=\"EN-US\"> m</span>（二进制表示）时，首先把<span lang=\"EN-US\">m</span>分成等长数据块<span lang=\"EN-US\"> m1 ,m2,..., mi </span>，块长<span lang=\"EN-US\">s<br /></span>，其中<span lang=\"EN-US\"> 2^s &lt;= n, s </span>尽可能的大。加密的公式是：<span lang=\"EN-US\"><p /></span></span></p><p class=\"MsoPlainText\" style=\"MARGIN: 0cm 0cm 0pt; TEXT-INDENT: 21pt\"><span lang=\"EN-US\" style=\"mso-bidi-font-family: 宋体; mso-hansi-font-family: 宋体\">ci = mi^e ( mod n ) <br style=\"mso-special-character: line-break\" /><br style=\"mso-special-character: line-break\" /><p /></span></p><p class=\"MsoPlainText\" style=\"MARGIN: 0cm 0cm 0pt 21pt\"><span lang=\"EN-US\" style=\"mso-bidi-font-family: 宋体; mso-hansi-font-family: 宋体\">3</span><span style=\"mso-bidi-font-family: 宋体; mso-hansi-font-family: 宋体\">、解密<span lang=\"EN-US\"><br /></span>解密时作如下计算：<span lang=\"EN-US\"><br />mi = ci^d ( mod n ) <p /></span></span></p><h2 style=\"MARGIN: 13pt 0cm 13pt 21pt; TEXT-INDENT: -21pt; tab-stops: list 21.0pt; mso-list: l0 level1 lfo1\"><span lang=\"EN-US\" style=\"mso-bidi-font-family: Arial; mso-fareast-font-family: Arial\"><span style=\"mso-list: Ignore\"><font face=\"Arial\">16.</font></span></span><span style=\"FONT-FAMILY: 黑体; mso-ascii-font-family: Arial\">散列算法</span></h2><p class=\"MsoPlainText\" style=\"MARGIN: 0cm 0cm 0pt; TEXT-INDENT: 21pt\"><span style=\"mso-bidi-font-family: 宋体; mso-hansi-font-family: 宋体\">散列算法，也称为单向散列函数、杂凑函数、哈希算法、<span lang=\"EN-US\">HASH</span>算法或消息摘要算法。它通过把一个单向数学函数应用于数据，将任意长度的一块数据转换为一个定长的、不可逆转的数据。这段数据通常叫做消息摘要（比如，对一个几兆字节的文件应用散列算法，得到一个<span lang=\"EN-US\">128</span>位的消息摘要）。消息摘要代表了原始数据的特征，当原始数据发生改变时，重新生成的消息摘要也会随之变化，即使原始数据的变化非常小，也可以引起消息摘要的很大变化。因此，消息摘要算法可以敏感地检测到数据是否被篡改。消息摘要算法再结合其它的算法就可以用来保护数据的完整性。<span lang=\"EN-US\"><p /></span></span></p><p class=\"MsoPlainText\" style=\"MARGIN: 0cm 0cm 0pt; TEXT-INDENT: 21pt\"><span style=\"mso-bidi-font-family: 宋体; mso-hansi-font-family: 宋体\">好的单向散列函数必须具有以下特性：<span lang=\"EN-US\"><p /></span></span></p><p class=\"MsoPlainText\" style=\"MARGIN: 0cm 0cm 0pt; TEXT-INDENT: 21pt\"><span lang=\"EN-US\" style=\"mso-bidi-font-family: 宋体; mso-hansi-font-family: 宋体\">1) </span><span style=\"mso-bidi-font-family: 宋体; mso-hansi-font-family: 宋体\">计算的单向性：给定<span lang=\"EN-US\">M</span>和<span lang=\"EN-US\">H</span>，求<span lang=\"EN-US\">h</span>＝<span lang=\"EN-US\">H(M)</span>容易，但反过来给定<span lang=\"EN-US\">h</span>和<span lang=\"EN-US\">H</span>，求<span lang=\"EN-US\">M</span>＝<span lang=\"EN-US\">H-1(h)</span>在计算上是不可行的。<span lang=\"EN-US\"><p /></span></span></p><p class=\"MsoPlainText\" style=\"MARGIN: 0cm 0cm 0pt; TEXT-INDENT: 21pt\"><span lang=\"EN-US\" style=\"mso-bidi-font-family: 宋体; mso-hansi-font-family: 宋体\">2) </span><span style=\"mso-bidi-font-family: 宋体; mso-hansi-font-family: 宋体\">弱碰撞自由：给定<span lang=\"EN-US\">M</span>，要寻找另一信息<span lang=\"EN-US\"> M</span>′，满足<span lang=\"EN-US\"> H(M</span>′<span lang=\"EN-US\">)</span>＝<span lang=\"EN-US\">H(M)</span>在计算上不可行。<span lang=\"EN-US\"><p /></span></span></p><p class=\"MsoPlainText\" style=\"MARGIN: 0cm 0cm 0pt; TEXT-INDENT: 21pt\"><span lang=\"EN-US\" style=\"mso-bidi-font-family: 宋体; mso-hansi-font-family: 宋体\">3) </span><span style=\"mso-bidi-font-family: 宋体; mso-hansi-font-family: 宋体\">强碰撞自由：，要寻找不同的信息<span lang=\"EN-US\">M </span>和<span lang=\"EN-US\">M</span>′，满足<span lang=\"EN-US\"> H(M</span>′<span lang=\"EN-US\">)</span>＝<span lang=\"EN-US\">H(M)</span>在计算上不可行。<span lang=\"EN-US\"><p /></span></span></p><p class=\"MsoPlainText\" style=\"MARGIN: 0cm 0cm 0pt; TEXT-INDENT: 21pt\"><span style=\"mso-bidi-font-family: 宋体; mso-hansi-font-family: 宋体\">单向散列函数的使用方法为：用散列函数对数据生成散列值并保存，以后每次使用时都对数据使用相同的散列函数进行散列，如果得到的值与保存的散列值相等，则认为数据未被修改<span lang=\"EN-US\">(</span>数据完整性验证<span lang=\"EN-US\">)</span>或两次所散列的原始数据相同<span lang=\"EN-US\">(</span>口令验证<span lang=\"EN-US\">)</span>。<span lang=\"EN-US\"><p /></span></span></p><p class=\"MsoPlainText\" style=\"MARGIN: 0cm 0cm 0pt; TEXT-INDENT: 21pt\"><span style=\"mso-bidi-font-family: 宋体; mso-hansi-font-family: 宋体\">典型的散列函数有：<span lang=\"EN-US\">MD5</span>，<span lang=\"EN-US\">SHA-1</span>，<span lang=\"EN-US\">HMAC</span>，<span lang=\"EN-US\">GOST</span>等。单向散列函数主要用在一些只需加密不需解密的场合：如验证数据的完整性、口令表的加密、数字签名、身份认证等。<span lang=\"EN-US\"><p /></span></span></p><h2 style=\"MARGIN: 13pt 0cm 13pt 21pt; TEXT-INDENT: -21pt; tab-stops: list 21.0pt; mso-list: l0 level1 lfo1\"><span lang=\"EN-US\" style=\"mso-bidi-font-family: Arial; mso-fareast-font-family: Arial\"><span style=\"mso-list: Ignore\"><font face=\"Arial\">17.</font></span></span><span style=\"FONT-FAMILY: 黑体; mso-ascii-font-family: Arial\">关于</span><span lang=\"EN-US\"><font face=\"Arial\">MD5</font></span><span style=\"FONT-FAMILY: 黑体; mso-ascii-font-family: Arial\">和</span><span lang=\"EN-US\"><font face=\"Arial\">SHA-1</font></span><span style=\"FONT-FAMILY: 黑体; mso-ascii-font-family: Arial\">等</span></h2><p class=\"MsoPlainText\" style=\"MARGIN: 0cm 0cm 0pt; TEXT-INDENT: 21pt\"><span lang=\"EN-US\" style=\"mso-bidi-font-family: 宋体; mso-hansi-font-family: 宋体\">2004</span><span style=\"mso-bidi-font-family: 宋体; mso-hansi-font-family: 宋体\">年，山东大学王小云教授攻破了<span lang=\"EN-US\">MD5</span>算法，引起密码学界的轩然大波。<span lang=\"EN-US\"><p /></span></span></p><p class=\"MsoPlainText\" style=\"MARGIN: 0cm 0cm 0pt; TEXT-INDENT: 21pt\"><span lang=\"EN-US\" style=\"mso-bidi-font-family: 宋体; mso-hansi-font-family: 宋体\">MD5</span><span style=\"mso-bidi-font-family: 宋体; mso-hansi-font-family: 宋体\">的全称是<span lang=\"EN-US\">Message-Digest Algorithm 5</span>（信息<span lang=\"EN-US\">-</span>摘要算法），在<span lang=\"EN-US\">90</span>年代初由<span lang=\"EN-US\">MIT Laboratory for Computer Science</span>和<span lang=\"EN-US\">RSA Data Security Inc</span>的<span lang=\"EN-US\">Ronald L. Rivest</span>开发出来，经<span lang=\"EN-US\">MD2</span>、<span lang=\"EN-US\">MD3</span>和<span lang=\"EN-US\">MD4</span>发展而来。<span lang=\"EN-US\"><p /></span></span></p><p class=\"MsoPlainText\" style=\"MARGIN: 0cm 0cm 0pt; TEXT-INDENT: 21pt\"><chsdate w:st=\"on\" isrocdate=\"False\" islunardate=\"False\" day=\"17\" month=\"8\" year=\"2004\"><span lang=\"EN-US\">2004</span>年<span lang=\"EN-US\">8</span>月<span lang=\"EN-US\">17</span>日</chsdate>的美国加州圣巴巴拉召开的国际密码学会议（<span lang=\"EN-US\">Crypto</span><span lang=\"EN-US\" style=\"FONT-FAMILY: \'Courier New\'; mso-ascii-font-family: 宋体\">’</span><span lang=\"EN-US\">2004</span>）安排了三场关于杂凑函数的特别报告。在国际著名密码学家<span lang=\"EN-US\">Eli Biham</span>和<span lang=\"EN-US\">Antoine Joux</span>相继做了对<span lang=\"EN-US\">SHA-1</span>的分析与给出<span lang=\"EN-US\">SHA-0</span>的一个碰撞之后，来自山东大学的王小云教授做了破译<span lang=\"EN-US\">MD5</span>、<span lang=\"EN-US\">HAVAL-128</span>、<span lang=\"EN-US\"> MD4</span>和<span lang=\"EN-US\">RIPEMD</span>算法的报告。王小云教授的报告轰动了全场，得到了与会专家的赞叹。<span lang=\"EN-US\" style=\"mso-bidi-font-family: 宋体; mso-hansi-font-family: 宋体\"><p /></span></p><p class=\"MsoPlainText\" style=\"MARGIN: 0cm 0cm 0pt; TEXT-INDENT: 21pt\"><span style=\"mso-bidi-font-family: 宋体; mso-hansi-font-family: 宋体\">不久，密码学家<span lang=\"EN-US\">Lenstra</span>利用王小云提供的<span lang=\"EN-US\">MD5</span>碰撞，伪造了符合<span lang=\"EN-US\">X.509</span>标准的数字证书，这就说明了<span lang=\"EN-US\">MD5</span>的破译已经不仅仅是理论破译结果，而是可以导致实际的攻击，<span lang=\"EN-US\">MD5</span>的撤出迫在眉睫。<span lang=\"EN-US\"><p /></span></span></p><p class=\"MsoPlainText\" style=\"MARGIN: 0cm 0cm 0pt; TEXT-INDENT: 21pt\"><span style=\"mso-bidi-font-family: 宋体; mso-hansi-font-family: 宋体\">安全散列算法<span lang=\"EN-US\">1(SHA-1</span>）是由<span lang=\"EN-US\">NSA</span>设计的，并由<span lang=\"EN-US\">NIST</span>将其收录到<span lang=\"EN-US\"> FIPS </span>中，作为散列数据的标准。它可产生一个<span lang=\"EN-US\"> 160 </span>位的散列值。<span lang=\"EN-US\">SHA-1</span>是流行的用于创建数字签名的单向散列算法。 <span lang=\"EN-US\"><p /></span></span></p><p class=\"MsoPlainText\" style=\"MARGIN: 0cm 0cm 0pt; TEXT-INDENT: 21pt\"><span style=\"mso-bidi-font-family: 宋体; mso-hansi-font-family: 宋体\">在<span lang=\"EN-US\">MD5</span>被王小云为代表的中国专家破译之后，世界密码学界仍然认为<span lang=\"EN-US\">SHA</span>－<span lang=\"EN-US\">1</span>是安全的。<chsdate w:st=\"on\" isrocdate=\"False\" islunardate=\"False\" day=\"7\" month=\"2\" year=\"2005\"><span lang=\"EN-US\">2005</span>年<span lang=\"EN-US\">2</span>月<span lang=\"EN-US\">7</span>日</chsdate>，美国国家标准技术研究院发表申明，<span lang=\"EN-US\">SHA</span>－<span lang=\"EN-US\">1</span>没有被攻破，并且没有足够的理由怀疑它会很快被攻破。而仅仅在一周之后，王小云就发布了消息，说明了<span lang=\"EN-US\">SHA-1</span>算法寻找一对碰撞的复杂度是<span lang=\"EN-US\">2^69</span>，而不是密码学家以前认为的<span lang=\"EN-US\">2^80</span>。<span lang=\"EN-US\"><p /></span></span></p><p class=\"MsoPlainText\" style=\"MARGIN: 0cm 0cm 0pt; TEXT-INDENT: 21pt\"><span style=\"mso-bidi-font-family: 宋体; mso-hansi-font-family: 宋体\">如何理解这个结果呢？在很多报道中，包括山东大学的网站上，都说<span lang=\"EN-US\">SHA1</span>被攻破了，被破解了，云云。作者对这类说法持保留态度。引用<personname w:st=\"on\" productid=\"王小云\">王小云</personname>教授论文中的说法：<span lang=\"EN-US\"><p /></span></span></p><p class=\"MsoPlainText\" style=\"MARGIN: 0cm 0cm 0pt; TEXT-INDENT: 21pt\"><span style=\"mso-bidi-font-family: 宋体; mso-hansi-font-family: 宋体\">“对于<span lang=\"EN-US\">SHA0</span>，这种攻击很有效，我们能够在不超过<span lang=\"EN-US\">2^39</span>次<span lang=\"EN-US\">Hash</span>操作中找到实际的碰撞。我们也对弱化到<span lang=\"EN-US\">58</span>步的<span lang=\"EN-US\">SHA1</span>进行了攻击，并在不超过<span lang=\"EN-US\">2^33</span>次<span lang=\"EN-US\">Hash</span>操作中找到了实际的碰撞。”<span lang=\"EN-US\"><p /></span></span></p><p class=\"MsoPlainText\" style=\"MARGIN: 0cm 0cm 0pt; TEXT-INDENT: 21pt\"><span lang=\"EN-US\" style=\"mso-bidi-font-family: 宋体; mso-hansi-font-family: 宋体\">“SHA0</span><span style=\"mso-bidi-font-family: 宋体; mso-hansi-font-family: 宋体\">和<span lang=\"EN-US\">58</span>步的<span lang=\"EN-US\">SHA1</span>是作为<span lang=\"EN-US\">80</span>步完整<span lang=\"EN-US\">SHA1</span>的简化版，用来验证我们的新方法的效率的。此外，我们的分析表明，减弱到<span lang=\"EN-US\">70</span>步的<span lang=\"EN-US\">SHA1</span>的碰撞复杂度是<span lang=\"EN-US\">2^50</span>次<span lang=\"EN-US\">Hash</span>操作。基于这个估计，我们期望在现在的超级计算机上能找到<span lang=\"EN-US\">70</span>步<span lang=\"EN-US\">SHA1</span>的真实碰撞。<span lang=\"EN-US\">”<p /></span></span></p><p class=\"MsoPlainText\" style=\"MARGIN: 0cm 0cm 0pt; TEXT-INDENT: 21pt\"><span style=\"mso-bidi-font-family: 宋体; mso-hansi-font-family: 宋体\">所以，严格说来应该这样理解：这个结果把攻破<span lang=\"EN-US\">SHA1</span>的计算量降低了<span lang=\"EN-US\">2000</span>倍。在某些情况下，<span lang=\"EN-US\">SHA1</span>似乎走到了不安全的边缘。<span lang=\"EN-US\"><p /></span></span></p><p class=\"MsoPlainText\" style=\"MARGIN: 0cm 0cm 0pt; TEXT-INDENT: 21pt\"><span lang=\"EN-US\" style=\"FONT-SIZE: 10.5pt; FONT-FAMILY: \'Times New Roman\'; mso-bidi-font-family: 宋体; mso-hansi-font-family: 宋体; mso-fareast-font-family: 宋体; mso-bidi-font-size: 12.0pt; mso-font-kerning: 1.0pt; mso-ansi-language: EN-US; mso-fareast-language: ZH-CN; mso-bidi-language: AR-SA\">MD5</span><span style=\"FONT-SIZE: 10.5pt; FONT-FAMILY: 宋体; mso-bidi-font-family: 宋体; mso-ascii-font-family: \'Times New Roman\'; mso-bidi-font-size: 12.0pt; mso-font-kerning: 1.0pt; mso-ansi-language: EN-US; mso-fareast-language: ZH-CN; mso-bidi-language: AR-SA\">被攻破了，</span><span lang=\"EN-US\" style=\"FONT-SIZE: 10.5pt; FONT-FAMILY: \'Times New Roman\'; mso-bidi-font-family: 宋体; mso-hansi-font-family: 宋体; mso-fareast-font-family: 宋体; mso-bidi-font-size: 12.0pt; mso-font-kerning: 1.0pt; mso-ansi-language: EN-US; mso-fareast-language: ZH-CN; mso-bidi-language: AR-SA\">SHA1</span><span style=\"FONT-SIZE: 10.5pt; FONT-FAMILY: 宋体; mso-bidi-font-family: 宋体; mso-ascii-font-family: \'Times New Roman\'; mso-bidi-font-size: 12.0pt; mso-font-kerning: 1.0pt; mso-ansi-language: EN-US; mso-fareast-language: ZH-CN; mso-bidi-language: AR-SA\">也不那么安全了，怎么办呢？现在看来，还有</span><span lang=\"EN-US\" style=\"FONT-SIZE: 10.5pt; FONT-FAMILY: \'Times New Roman\'; mso-bidi-font-family: 宋体; mso-hansi-font-family: 宋体; mso-fareast-font-family: 宋体; mso-bidi-font-size: 12.0pt; mso-font-kerning: 1.0pt; mso-ansi-language: EN-US; mso-fareast-language: ZH-CN; mso-bidi-language: AR-SA\">SHA-256</span><span style=\"FONT-SIZE: 10.5pt; FONT-FAMILY: 宋体; mso-bidi-font-family: 宋体; mso-ascii-font-family: \'Times New Roman\'; mso-bidi-font-size: 12.0pt; mso-font-kerning: 1.0pt; mso-ansi-language: EN-US; mso-fareast-language: ZH-CN; mso-bidi-language: AR-SA\">和</span><span lang=\"EN-US\" style=\"FONT-SIZE: 10.5pt; FONT-FAMILY: \'Times New Roman\'; mso-bidi-font-family: 宋体; mso-hansi-font-family: 宋体; mso-fareast-font-family: 宋体; mso-bidi-font-size: 12.0pt; mso-font-kerning: 1.0pt; mso-ansi-language: EN-US; mso-fareast-language: ZH-CN; mso-bidi-language: AR-SA\">SHA-512</span><span style=\"FONT-SIZE: 10.5pt; FONT-FAMILY: 宋体; mso-bidi-font-family: 宋体; mso-ascii-font-family: \'Times New Roman\'; mso-bidi-font-size: 12.0pt; mso-font-kerning: 1.0pt; mso-ansi-language: EN-US; mso-fareast-language: ZH-CN; mso-bidi-language: AR-SA\">等算法可用。密码学家也在研究新的散列算法。</span></p><span style=\"FONT-SIZE: 10.5pt; FONT-FAMILY: 宋体; mso-bidi-font-family: 宋体; mso-ascii-font-family: \'Times New Roman\'; mso-bidi-font-size: 12.0pt; mso-font-kerning: 1.0pt; mso-ansi-language: EN-US; mso-fareast-language: ZH-CN; mso-bidi-language: AR-SA\"><h2 style=\"MARGIN: 13pt 0cm 13pt 21pt; TEXT-INDENT: -21pt; tab-stops: list 21.0pt; mso-list: l0 level1 lfo1\"><span lang=\"EN-US\" style=\"mso-bidi-font-family: Arial; mso-fareast-font-family: Arial\"><span style=\"mso-list: Ignore\"><font face=\"Arial\">18.</font></span></span><span style=\"FONT-FAMILY: 黑体; mso-ascii-font-family: Arial\">数字鉴名</span></h2><p class=\"MsoPlainText\" style=\"MARGIN: 0cm 0cm 0pt; TEXT-INDENT: 21pt\"><span style=\"mso-bidi-font-family: 宋体; mso-hansi-font-family: 宋体\">密码技术除了提供信息的加密解密外，还提供对信息来源的鉴别、保证信息的完整和不可否认等功能，而这三种功能都是结合数字签名技术来实现的。<span lang=\"EN-US\"><p /></span></span></p><p class=\"MsoPlainText\" style=\"MARGIN: 0cm 0cm 0pt; TEXT-INDENT: 21pt\"><span style=\"mso-bidi-font-family: 宋体; mso-hansi-font-family: 宋体\">简单地说，数字签名的原理可以这样理解：用非对称算法的私钥加密的内容只能用对应的公钥来解密。而私钥是不公开的。因此，如果一段信息能用某个人的公钥解密，那么它一定是用此人的私钥加密的。它和物理的签名一样，是很难伪造的。<span lang=\"EN-US\"><p /></span></span></p><p class=\"MsoPlainText\" style=\"MARGIN: 0cm 0cm 0pt; TEXT-INDENT: 21pt\"><span style=\"mso-bidi-font-family: 宋体; mso-hansi-font-family: 宋体\">在实际应用中，数字签名的过程通常是这样实现：<span lang=\"EN-US\"><p /></span></span></p><p class=\"MsoPlainText\" style=\"MARGIN: 0cm 0cm 0pt; TEXT-INDENT: 21pt\"><shapetype id=\"_x0000_t75\" coordsize=\"21600,21600\" o:spt=\"75\" o:preferrelative=\"t\" path=\"m@4@5l@4@11@9@11@9@5xe\" filled=\"f\" stroked=\"f\"><stroke joinstyle=\"miter\" /><formulas><f eqn=\"if lineDrawn pixelLineWidth 0\" /><f eqn=\"sum @0 1 0\" /><f eqn=\"sum 0 0 @1\" /><f eqn=\"prod @2 1 2\" /><f eqn=\"prod @3 21600 pixelWidth\" /><f eqn=\"prod @3 21600 pixelHeight\" /><f eqn=\"sum @0 0 1\" /><f eqn=\"prod @6 1 2\" /><f eqn=\"prod @7 21600 pixelWidth\" /><f eqn=\"sum @8 21600 0\" /><f eqn=\"prod @7 21600 pixelHeight\" /><f eqn=\"sum @10 21600 0\" /></formulas><path o:extrusionok=\"f\" gradientshapeok=\"t\" o:connecttype=\"rect\" /><lock v:ext=\"edit\" aspectratio=\"t\" /></shapetype><shape id=\"_x0000_s1026\" style=\"MARGIN-TOP: 78pt; Z-INDEX: -1; LEFT: 0px; MARGIN-LEFT: 29.3pt; WIDTH: 330.7pt; POSITION: absolute; HEIGHT: 111.35pt; TEXT-ALIGN: left\" type=\"#_x0000_t75\" wrapcoords=\"-49 0 -49 21454 21600 21454 21600 0 -49 0\"><imagedata src=\"file:///C:\\Temp\\msohtml1\\01\\clip_image001.jpg\" o:title=\"004\" /><wrap type=\"tight\" /></shape><span style=\"mso-bidi-font-family: 宋体; mso-hansi-font-family: 宋体\">将要传送的明文通过一种函数运算（<span lang=\"EN-US\">Hash</span>）转换成报文摘要（不同的明文对应不同的报文摘要），报文摘要用私钥加密后与明文一起传送给接受方，接受方用发送方的公钥来解密报文摘要，再将接受的明文产生新的报文摘要与发送方的报文摘要比较，比较结果一致表示明文确实来自期望的发送方，并且未被改动。如果不一致表示明文已被篡改或不是来自期望的发送方。<span lang=\"EN-US\"><p /></span></span></p><a title=\"点击图片看全图\" href=\"http://www.flagware.net/uploadfile/007.jpg\" target=\"_blank\"><p align=\"center\"><img alt=\"\" src=\"http://www.flagware.net/uploadfile/007.jpg\" onload=\"function anonymous()<br>&leftsign;<br>if(this.width>screen.width-333)this.width=screen.width-333<br>&rightsign;\" border=\"0\" /></p><h2 style=\"MARGIN: 13pt 0cm 13pt 21pt; TEXT-INDENT: -21pt; tab-stops: list 21.0pt; mso-list: l0 level1 lfo1\"><span lang=\"EN-US\" style=\"mso-bidi-font-family: Arial; mso-fareast-font-family: Arial\"><span style=\"mso-list: Ignore\"><font face=\"Arial\">19.</font></span></span><span style=\"FONT-FAMILY: 黑体; mso-ascii-font-family: Arial\">数字证书</span></h2><p class=\"MsoPlainText\" style=\"MARGIN: 0cm 0cm 0pt; TEXT-INDENT: 21pt\"><span style=\"mso-bidi-font-family: 宋体; mso-hansi-font-family: 宋体\">为了保证互联网上电子交易及支付的安全性，防范交易及支付过程中的欺诈行为，必须在网上建立一种信任机制。这就要求参加电子商务的买方和卖方都必须拥有合法的身份，并且在网上能够有效无误的被进行验证。数字证书是一种权威性的电子文档。它提供了一种在<span lang=\"EN-US\">Internet</span>上验证您身份的方式，其作用类似于司机的驾驶执照或日常生活中的身份证。它是由一个由权威机构<span lang=\"EN-US\">----CA</span>证书授权<span lang=\"EN-US\">(Certificate Authority)</span>中心发行的，人们可以在互联网交往中用它来识别对方的身份。当然在数字证书认证的过程中，证书认证中心（<span lang=\"EN-US\">CA</span>）作为权威的、公正的、可信赖的第三方，其作用是至关重要的。<span lang=\"EN-US\"><br /></span></span><span lang=\"EN-US\" style=\"FONT-FAMILY: Gulim\"><br /></span><span style=\"mso-bidi-font-family: 宋体; mso-hansi-font-family: 宋体\">　　数字证书颁发过程一般为：用户首先产生自己的密钥对，并将公共密钥及部分个人身份信息传送给认证中心。认证中心在核实身份后，将执行一些必要的步骤，以确信请求确实由用户发送而来，然后，认证中心将发给用户一个数字证书，该证书内包含用户的个人信息和他的公钥信息，同时还附有认证中心的签名信息。用户就可以使用自己的数字证书进行相关的各种活动。数字证书由独立的证书发行机构发布。数字证书各不相同，每种证书可提供不同级别的可信度。可以从证书发行机构获得您自己的数字证书。 <span lang=\"EN-US\"><p /></span></span></p><p class=\"MsoPlainText\" style=\"MARGIN: 0cm 0cm 0pt; TEXT-INDENT: 21pt\"><b><span lang=\"EN-US\"><br /></span></b>　　随着<span lang=\"EN-US\">Internet</span>的普及、各种电子商务活动和电子政务活动的飞速发展，数字证书开始广泛地应用到各个领域之中，目前主要包括：发送安全电子邮件、访问安全站点、网上招标投标、网上签约、网上订购、安全网上公文传送、网上缴费、网上缴税、网上炒股、网上购物和网上报关等。<span lang=\"EN-US\" style=\"mso-bidi-font-family: 宋体; mso-hansi-font-family: 宋体\"><p /></span></p><h2 style=\"MARGIN: 13pt 0cm 13pt 21pt; TEXT-INDENT: -21pt; tab-stops: list 21.0pt; mso-list: l0 level1 lfo1\"><span lang=\"EN-US\" style=\"FONT-FAMILY: Gulim; mso-bidi-font-family: Gulim\"><span style=\"mso-list: Ignore\">20.</span></span><span lang=\"EN-US\"><font face=\"Arial\">CA</font></span><span style=\"FONT-FAMILY: Gulim\">　</span><span lang=\"EN-US\" style=\"FONT-FAMILY: Gulim; mso-fareast-font-family: 黑体\"><p /></span></h2><p class=\"MsoPlainText\" style=\"MARGIN: 0cm 0cm 0pt; TEXT-INDENT: 21pt\"><span lang=\"EN-US\" style=\"mso-bidi-font-family: 宋体; mso-hansi-font-family: 宋体\">CA</span><span style=\"mso-bidi-font-family: 宋体; mso-hansi-font-family: 宋体\">是<span lang=\"EN-US\">Certification Authority</span>的缩写。<span lang=\"EN-US\">CA</span>中心，又称为数字证书认证中心。<span lang=\"EN-US\">CA</span>中心作为电子交易中受信任的第三方，负责为电子商务环境中各个实体颁发数字证书，以证明各实体身份的真实性，并负责在交易中检验和管理证书；数字证书的用户拥有自己的公钥<span lang=\"EN-US\">/</span>私钥对。证书中包含有证书主体的身份信息、其公钥数据、发证机构名称等，发证机构验证证书主体为合法注册实体后，就对上述信息进行数字签名，形成证书。在公钥证书体系中，如果某公钥用户需要任何其它已向<span lang=\"EN-US\">CA</span>注册的用户的公钥，可直接向该用户索取证书，而后用<span lang=\"EN-US\">CA</span>的公钥解密解密即可得到认证的公钥；由于证书中已有<span lang=\"EN-US\">CA</span>的签名来实现认证，攻击者不具有<span lang=\"EN-US\">CA</span>的签名密钥，很难伪造出合法的证书，从而实现了公钥的认证性。 数字证书认证中心是整个网上电子交易安全的关键环节<span lang=\"EN-US\">,</span>是电子交易中信赖的基础。他必须是所有合法注册用户所信赖的具有权威性、信赖性及公正性的第三方机构。<span lang=\"EN-US\"><br />CA</span>的核心功能就是发放和管理数字证书。概括地说，<span lang=\"EN-US\">CA</span>认证中心的功能主要有：证书发放、证书更新、证书撤销和证书验证。具体描述如下：<span lang=\"EN-US\"><br /></span>（<span lang=\"EN-US\">1</span>）接收验证用户数字证书的申请。<span lang=\"EN-US\"><br /></span>（<span lang=\"EN-US\">2</span>）确定是否接受用户数字证书的申请，即证书的审批。<span lang=\"EN-US\"><br /></span>（<span lang=\"EN-US\">3</span>）向申请者颁发（或拒绝颁发）数字证书。<span lang=\"EN-US\"><br /></span>（<span lang=\"EN-US\">4</span>）接收、处理用户的数字证书更新请求。<span lang=\"EN-US\"><br /></span>（<span lang=\"EN-US\">5</span>）接收用户数字证书的查询、撤销。<span lang=\"EN-US\"><br /></span>（<span lang=\"EN-US\">6</span>）产生和发布证书的有效期。<span lang=\"EN-US\"><br /></span>（<span lang=\"EN-US\">7</span>）数字证书的归档。<span lang=\"EN-US\"><br /></span>（<span lang=\"EN-US\">8</span>）密钥归档。<span lang=\"EN-US\"><br /></span></span><span class=\"p11b1\"><span style=\"FONT-SIZE: 10pt\">（<span lang=\"EN-US\">9</span>）历史数据归档。<span lang=\"EN-US\"><p /></span></span></span></p><h2 style=\"MARGIN: 13pt 0cm 13pt 21pt; TEXT-INDENT: -21pt; tab-stops: list 21.0pt; mso-list: l0 level1 lfo1\"><span lang=\"EN-US\" style=\"mso-bidi-font-family: Arial; mso-fareast-font-family: Arial\"><span style=\"mso-list: Ignore\"><font face=\"Arial\">21.</font></span></span><span lang=\"EN-US\"><font face=\"Arial\">PGP</font></span></h2><p class=\"MsoPlainText\" style=\"MARGIN: 0cm 0cm 0pt; TEXT-INDENT: 21pt\"><span class=\"p11b1\"><span lang=\"EN-US\" style=\"FONT-SIZE: 10pt\">PGP</span></span><span class=\"p11b1\"><span style=\"FONT-SIZE: 10pt\">是<span lang=\"EN-US\">Pretty Good Privacy</span>的缩写。<span lang=\"EN-US\">PGP</span>最初是<span lang=\"EN-US\">Phil Zimmermann</span>在<span lang=\"EN-US\">1991</span>年写的一套程序的名字。这套程序后来由<span lang=\"EN-US\">MIT, ViaCrypt, PGP Inc.</span>维护和发布。现在的<span lang=\"EN-US\">PGP</span>由<span lang=\"EN-US\">Network Associates Inc. (NAI)</span>作为商业软件进行销售。同时，<span lang=\"EN-US\">PGP</span>也是一个网络标准的名字<span lang=\"EN-US\">(RFC 2440: Open PGP Message Format)</span>。在这里，我们主要讨论作为<span lang=\"EN-US\">RFC</span>标准的<span lang=\"EN-US\">PGP</span>。<span lang=\"EN-US\"><p /></span></span></span></p><p class=\"MsoPlainText\" style=\"MARGIN: 0cm 0cm 0pt; TEXT-INDENT: 21pt\"><span class=\"p11b1\"><span lang=\"EN-US\" style=\"FONT-SIZE: 10pt\">PGP</span></span><span class=\"p11b1\"><span style=\"FONT-SIZE: 10pt\">是一种以<span lang=\"EN-US\">RSA</span>等密码算法为基础，用来保护电子邮件等信息的安全性的系统。可以用它对你的邮件保密以防止非授权者阅读，它还能对你的邮件加上数字签名从而使收信人可以确信邮件是你发来的。它让你可以安全地和你从未见过的人们通讯，事先并不需要任何保密的渠道用来传递密匙。<span lang=\"EN-US\"><p /></span></span></span></p><p class=\"MsoPlainText\" style=\"MARGIN: 0cm 0cm 0pt; TEXT-INDENT: 21pt\"><span class=\"p11b1\"><span style=\"FONT-SIZE: 10pt\">它的加密方法用的是我们前面讨论过的算法。它与其它系统不同的地方在于它的密钥管理。<span lang=\"EN-US\"><p /></span></span></span></p><p class=\"MsoPlainText\" style=\"MARGIN: 0cm 0cm 0pt; TEXT-INDENT: 21pt\"><span class=\"p11b1\"><span lang=\"EN-US\" style=\"FONT-SIZE: 10pt\"><p> </p></span></span></p><p class=\"MsoPlainText\" style=\"MARGIN: 0cm 0cm 0pt; TEXT-INDENT: 21pt\"><span class=\"p11b1\"><span style=\"FONT-SIZE: 10pt\">一个成熟的加密体系必然要有一个成熟的密钥管理机制配套。公钥体制的提出就是为了解决传统加密体系的密钥分配过程保密的缺点。比如网络黑客们常用的手段之一就是<span lang=\"EN-US\">&quot;</span>监听<span lang=\"EN-US\">&quot;</span>，如果密钥是通过网络传送就太危险了。对<span lang=\"EN-US\">PGP</span>来说公钥本来就要公开，就没有防监听的问题。但公钥的发布中仍然存在安全性问题，例如公钥被篡改（<span lang=\"EN-US\">public key tampering</span>），这可能是公钥密码体系中最大漏洞 。用户必须确信用户的公钥属于需要收信的那个人。<span lang=\"EN-US\"><p /></span></span></span></p><p class=\"MsoPlainText\" style=\"MARGIN: 0cm 0cm 0pt; TEXT-INDENT: 21pt\"><span class=\"p11b1\"><span style=\"FONT-SIZE: 10pt\">下面举个例子来说明这个问题：以用户<span lang=\"EN-US\">A</span>和用户<span lang=\"EN-US\">B</span>通信为例，现假设用户<span lang=\"EN-US\">A</span>想给用户<span lang=\"EN-US\">B</span>发信，首先用户<span lang=\"EN-US\">A</span>就必需获取用户<span lang=\"EN-US\">B</span>的公钥，用户<span lang=\"EN-US\">A</span>从<span lang=\"EN-US\">BBS</span>上下载或其它途径得到了<span lang=\"EN-US\">B</span>的公钥，并用它加密了信件发给了<span lang=\"EN-US\">B</span>。不幸的是，用户<span lang=\"EN-US\">A</span>和<span lang=\"EN-US\">B</span>都不知道，另一个用户<span lang=\"EN-US\">C</span>潜入<span lang=\"EN-US\">BBS</span>或网络中，侦听或截取到用户<span lang=\"EN-US\">B</span>的公钥，然后在自己的<span lang=\"EN-US\">PGP</span>系统中用用户<span lang=\"EN-US\">B</span>的名字生成密钥对中的公钥替换了用户<span lang=\"EN-US\">B</span>的公钥，并放在<span lang=\"EN-US\">BBS</span>上或直接以用户<span lang=\"EN-US\">B</span>的身份把更换后的用户<span lang=\"EN-US\">B</span>的</span></span><span class=\"p11b1\"><span lang=\"EN-US\" style=\"FONT-SIZE: 10pt; FONT-FAMILY: \'Courier New\'; mso-ascii-font-family: 宋体\">“</span></span><span class=\"p11b1\"><span style=\"FONT-SIZE: 10pt\">公钥</span></span><span class=\"p11b1\"><span lang=\"EN-US\" style=\"FONT-SIZE: 10pt; FONT-FAMILY: \'Courier New\'; mso-ascii-font-family: 宋体\">”</span></span><span class=\"p11b1\"><span style=\"FONT-SIZE: 10pt\">发给用户<span lang=\"EN-US\">A</span>。那用户<span lang=\"EN-US\">A</span>用来发信的公钥是已经是更改过的，实际上是用户<span lang=\"EN-US\">C</span>伪装用户<span lang=\"EN-US\">B</span>生成的另一个公钥。这样谁都不会起疑心，但这样一来用户<span lang=\"EN-US\">B</span>收到用户<span lang=\"EN-US\">A</span>的来信后就不能用自己的私钥解密了，更可恶的是，用户<span lang=\"EN-US\">C</span>还可伪造用户<span lang=\"EN-US\">B</span>的签名给用户<span lang=\"EN-US\">A</span>或其他人发信，因为用户<span lang=\"EN-US\">A</span>手中的公钥是伪造 ，用户<span lang=\"EN-US\">A</span>会以为真是用户<span lang=\"EN-US\">B</span>的来信。<span lang=\"EN-US\"><br /></span>　　防止这种情况出现的最好办法是避免让任何其他人有机会篡改公钥，但能做到这一点的是非常困难的，一种方法是直接从用户<span lang=\"EN-US\">B</span>手中得到他的公钥，然而当他在远在他乡或在时间上根本不可达到时，这是不可办到的。<span lang=\"EN-US\"><br /></span></span></span><span style=\"FONT-SIZE: 9pt\">　　</span><span class=\"p11b1\"><span style=\"FONT-SIZE: 10pt\">但<span lang=\"EN-US\">PGP</span>提出了一种公钥介绍机制来解决这个问题，其思路是这样的：如果用户<span lang=\"EN-US\">A</span>和用户<span lang=\"EN-US\">B</span>有一个共同的朋友<span lang=\"EN-US\">D</span>，而<span lang=\"EN-US\">D</span>知道他手中的<span lang=\"EN-US\">B</span>的公钥是正确的。这样<span lang=\"EN-US\">D</span>就成为用户<span lang=\"EN-US\">A</span>和<span lang=\"EN-US\">B</span>之间的公证人，用户<span lang=\"EN-US\">B</span>为了防止别人篡改自己的公钥，就把经过<span lang=\"EN-US\">D</span>签名的自己的公钥上载到<span lang=\"EN-US\">BBS</span>上让用户去拿，用户<span lang=\"EN-US\">A</span>想要取得用户<span lang=\"EN-US\">B</span>的公钥就必需先获取<span lang=\"EN-US\">D</span>的公钥来解密<span lang=\"EN-US\">BBS</span>或网上经过<span lang=\"EN-US\">D</span>签名的<span lang=\"EN-US\">B</span>的公钥，这样就等于加了双重保险，一般没有可能去篡改它而不被用户发现，即使是<span lang=\"EN-US\">BBS</span>的管理员。这就是从公共渠道传递公钥的安全手段。<span lang=\"EN-US\"><br /></span>　　说到这里也许有人会想到，只通过一个签名公证力度是不是小了点。 <span lang=\"EN-US\">PGP</span>当然考虑到了这一点，它的办法就是把由不同的人签名的自己的公钥收集在一起，发送到公共场合，这样可以希望大部分人至少认识其中一个，从而间接认证了用户的公钥。同样用户签了朋友的公钥后应该寄回给他，这样就可以让他通过该用户被该用户的其他朋友所认证。有点意思吧，和现实社会中人们的交往一样。<span lang=\"EN-US\">PGP</span>会自动根据用户拿到的公钥中有哪些是朋友介绍来的，把它们分为不同的信任级别，供用户参考决定对它们的信任程度。也可指定某人有几层转介公钥的能力，这种能力是随着认证的传递而递减的。<span lang=\"EN-US\"><br /></span></span></span><span style=\"FONT-SIZE: 9pt\">　　</span><span class=\"p11b1\"><span style=\"FONT-SIZE: 10pt\">如何安全地得到<span lang=\"EN-US\">D</span>或其他签名朋友的公钥呢？确实有可能用户<span lang=\"EN-US\">A</span>拿到的<span lang=\"EN-US\">D</span>或其他签名的朋友的公钥也假的，但这就求这个用户<span lang=\"EN-US\">C</span>必须对你们三人甚至很多人都很熟悉，这样的可能性不大，而且必需经过长时间的策划。当然，如果一定要追究这一点的话，那就是由一个大家普遍信任的机构担当这个角色，他被称为认证权威机构，每个由他签过字的公钥都被认为真的，这样大家只要有他的公钥就行了，认证这个人的公钥是方便的，因他广泛提供这个服务，假冒他的公钥是极困难的，因为他的公钥流传广泛。这样的<span lang=\"EN-US\">&quot;</span>权威机构<span lang=\"EN-US\">&quot;</span>适合由非个人控制组织或政府机构充当<span lang=\"EN-US\">----</span>这就是我们前面讨论过的<span lang=\"EN-US\">CA</span>。<span lang=\"EN-US\"><p /></span></span></span></p><h2 style=\"MARGIN: 13pt 0cm 13pt 21pt; TEXT-INDENT: -21pt; tab-stops: list 21.0pt; mso-list: l0 level1 lfo1\"><span lang=\"EN-US\" style=\"mso-bidi-font-family: Arial; mso-fareast-font-family: Arial\"><span style=\"mso-list: Ignore\"><font face=\"Arial\">22.</font></span></span><span style=\"FONT-FAMILY: 黑体; mso-ascii-font-family: Arial\">数字信封</span></h2><p class=\"MsoPlainText\" style=\"MARGIN: 0cm 0cm 0pt; TEXT-INDENT: 19.5pt\"><span class=\"p11b1\"><span style=\"FONT-SIZE: 10pt\">数字信封是一种综合运用对称算法、非对称算法、消息摘要算法和数字签名的消息加密机制。为什么要引入这种机制呢？这是因为：<span lang=\"EN-US\"><p /></span></span></span></p><p class=\"MsoPlainText\" style=\"MARGIN: 0cm 0cm 0pt; TEXT-INDENT: 19.5pt\"><span class=\"p11b1\"><span lang=\"EN-US\" style=\"FONT-SIZE: 10pt\">1</span></span><span class=\"p11b1\"><span style=\"FONT-SIZE: 10pt\">、对称算法速度比较快，与同等安全强度的非对称算法相比，一般要快三个数量级左右。但是对称算法需要通过一个安全的通道交换密钥（或协商密钥，或事先约定密钥）之后才能进行通信。<span lang=\"EN-US\"><p /></span></span></span></p><p class=\"MsoPlainText\" style=\"MARGIN: 0cm 0cm 0pt; TEXT-INDENT: 19.5pt\"><span class=\"p11b1\"><span lang=\"EN-US\" style=\"FONT-SIZE: 10pt\">2</span></span><span class=\"p11b1\"><span style=\"FONT-SIZE: 10pt\">、非对称算法较慢，但是它的优点是通信双方不必事先约定密钥就可以进行安全通信。<span lang=\"EN-US\"><p /></span></span></span></p><p class=\"MsoPlainText\" style=\"MARGIN: 0cm 0cm 0pt; TEXT-INDENT: 19.5pt\"><span class=\"p11b1\"><span lang=\"EN-US\" style=\"FONT-SIZE: 10pt\">3</span></span><span class=\"p11b1\"><span style=\"FONT-SIZE: 10pt\">、单纯的加密算法只能保证消息的机密性，但无法保证消息不被篡改。结合消息摘要和数字签名算法就可以保证数据的完整性，并能确认对方的身份。<span lang=\"EN-US\"><p /></span></span></span></p><p class=\"MsoPlainText\" style=\"MARGIN: 0cm 0cm 0pt; TEXT-INDENT: 21pt\"><span class=\"p11b1\"><span style=\"FONT-SIZE: 10pt; FONT-FAMILY: 宋体; mso-bidi-font-family: \'Times New Roman\'; mso-hansi-font-family: \'Times New Roman\'; mso-ascii-font-family: \'Times New Roman\'; mso-font-kerning: 1.0pt; mso-ansi-language: EN-US; mso-fareast-language: ZH-CN; mso-bidi-language: AR-SA\">具体操作如图所示。利用对称加密算法</span><span lang=\"EN-US\" style=\"FONT-SIZE: 10pt; FONT-FAMILY: \'Times New Roman\'; mso-fareast-font-family: 宋体; mso-font-kerning: 1.0pt; mso-ansi-language: EN-US; mso-fareast-language: ZH-CN; mso-bidi-language: AR-SA\">(</span><span style=\"FONT-SIZE: 10pt; FONT-FAMILY: 宋体; mso-bidi-font-family: \'Times New Roman\'; mso-hansi-font-family: \'Times New Roman\'; mso-ascii-font-family: \'Times New Roman\'; mso-font-kerning: 1.0pt; mso-ansi-language: EN-US; mso-fareast-language: ZH-CN; mso-bidi-language: AR-SA\">比如</span><span lang=\"EN-US\" style=\"FONT-SIZE: 10pt; FONT-FAMILY: \'Times New Roman\'; mso-fareast-font-family: 宋体; mso-font-kerning: 1.0pt; mso-ansi-language: EN-US; mso-fareast-language: ZH-CN; mso-bidi-language: AR-SA\">3DES)</span><span style=\"FONT-SIZE: 10pt; FONT-FAMILY: 宋体; mso-bidi-font-family: \'Times New Roman\'; mso-hansi-font-family: \'Times New Roman\'; mso-ascii-font-family: \'Times New Roman\'; mso-font-kerning: 1.0pt; mso-ansi-language: EN-US; mso-fareast-language: ZH-CN; mso-bidi-language: AR-SA\">对比较长的消息进行加密，再利用接收者的证书对密钥进行加密，加密消息和加密密钥一起发送给消息接收者。后者利用自己的私钥对加密密钥解密得到密钥，接着用密钥对加密消息进行解密得到消息原文。与数字签名一样，消息的发送者不会涉及任何保密内容，只要知道接收者证书的人都可以向他发送数据信封封装消息。</span></span></p><span class=\"p11b1\"><span style=\"FONT-SIZE: 10pt; FONT-FAMILY: 宋体; mso-bidi-font-family: \'Times New Roman\'; mso-hansi-font-family: \'Times New Roman\'; mso-ascii-font-family: \'Times New Roman\'; mso-font-kerning: 1.0pt; mso-ansi-language: EN-US; mso-fareast-language: ZH-CN; mso-bidi-language: AR-SA\"><a title=\"点击图片看全图\" href=\"http://www.flagware.net/uploadfile/008.jpg\" target=\"_blank\"><p align=\"center\"><img alt=\"\" src=\"http://www.flagware.net/uploadfile/008.jpg\" onload=\"function anonymous()<br>&leftsign;<br>if(this.width>screen.width-333)this.width=screen.width-333<br>&rightsign;\" border=\"0\" /></p><h2 style=\"MARGIN: 13pt 0cm 13pt 21pt; TEXT-INDENT: -21pt; tab-stops: list 21.0pt; mso-list: l0 level1 lfo1\"><span lang=\"EN-US\" style=\"mso-bidi-font-family: Arial; mso-fareast-font-family: Arial\"><span style=\"mso-list: Ignore\"><font face=\"Arial\">23.</font></span></span><span style=\"FONT-FAMILY: 黑体; mso-ascii-font-family: Arial\">椭圆曲线算法</span></h2><p class=\"MsoPlainText\" style=\"MARGIN: 0cm 0cm 0pt; TEXT-INDENT: 19.5pt\"><span class=\"p11b1\"><span style=\"FONT-SIZE: 10pt\"><font size=\"3\">当今使用的非对称算法根据其基于的数学难题可大致分为三类：<span lang=\"EN-US\"><p /></span></font></span></span></p><p class=\"MsoPlainText\" style=\"MARGIN: 0cm 0cm 0pt; TEXT-INDENT: 19.5pt\"><font size=\"3\"><span class=\"p11b1\"><span lang=\"EN-US\" style=\"FONT-SIZE: 10pt\">1</span></span><span class=\"p11b1\"><span style=\"FONT-SIZE: 10pt\">）整数分解（<span lang=\"EN-US\">IF</span>）体制，其安全性基于整数分解问题的难解性，典型例子是<span lang=\"EN-US\">RSA</span>体制和<span lang=\"EN-US\">Rabin</span>体制。<span lang=\"EN-US\"><p /></span></span></span></font></p><p class=\"MsoPlainText\" style=\"MARGIN: 0cm 0cm 0pt; TEXT-INDENT: 19.5pt\"><font size=\"3\"><span class=\"p11b1\"><span lang=\"EN-US\" style=\"FONT-SIZE: 10pt\">2</span></span><span class=\"p11b1\"><span style=\"FONT-SIZE: 10pt\">）离散对数（<span lang=\"EN-US\">DL</span>）体制，其安全性基于（一般）离散对数问题的难解性，典型例子是<span lang=\"EN-US\">DSA</span>体制、<span lang=\"EN-US\">ElGamal</span>体制和<span lang=\"EN-US\">Schnorr</span>体制。<span lang=\"EN-US\"><p /></span></span></span></font></p><p class=\"MsoPlainText\" style=\"MARGIN: 0cm 0cm 0pt; TEXT-INDENT: 19.5pt\"><font size=\"3\"><span class=\"p11b1\"><span lang=\"EN-US\" style=\"FONT-SIZE: 10pt\">3</span></span><span class=\"p11b1\"><span style=\"FONT-SIZE: 10pt\">）椭圆曲线（<span lang=\"EN-US\">EC</span>）体制，其安全性基于椭圆曲线离散对数问题的难解性，典型例子是<span lang=\"EN-US\">ECDSA</span>体制。<span lang=\"EN-US\"><p /></span></span></span></font></p><p class=\"MsoPlainText\" style=\"MARGIN: 0cm 0cm 0pt; TEXT-INDENT: 19.5pt\"><span class=\"p11b1\"><span style=\"FONT-SIZE: 10pt\"><font size=\"3\">椭圆曲线密码是在<span lang=\"EN-US\">1985</span>年由<span lang=\"EN-US\">Neal Koblitz</span>和<span lang=\"EN-US\">Victor Miller</span>独立提出来的。近年来，椭圆曲线体制由于其具有的很多技术优势，而受到越来越多密码学者的关注，逐渐形成了一个研究热点。它已被诸如<span lang=\"EN-US\">ANSI</span>（<span lang=\"EN-US\">American Natio nal Standards Institute</span>）、<span lang=\"EN-US\">IEEE</span>（<span lang=\"EN-US\">Institute of Electrical and Electroni cs Engineers</span>）、<span lang=\"EN-US\">ISO</span>（<span lang=\"EN-US\">International Standards Organization</span>）和<span lang=\"EN-US\">NIST</span>（<span lang=\"EN-US\">National Institute of Standards and Technology</span>）等标准化组织纳入为标准。它的技术优点包括：<span lang=\"EN-US\"><p /></span></font></span></span></p><p class=\"MsoPlainText\" style=\"MARGIN: 0cm 0cm 0pt; TEXT-INDENT: 19.5pt\"><font size=\"3\"><span class=\"p11b1\"><span lang=\"EN-US\" style=\"FONT-SIZE: 10pt\">1</span></span><span class=\"p11b1\"><span style=\"FONT-SIZE: 10pt\">）安全性能更高：椭圆曲线离散对数问题的计算复杂度目前是完全指数级的，而<span lang=\"EN-US\">RSA</span>是亚指数级的。<span lang=\"EN-US\"><p /></span></span></span></font></p><p class=\"MsoPlainText\" style=\"MARGIN: 0cm 0cm 0pt; TEXT-INDENT: 19.5pt\"><font size=\"3\"><span class=\"p11b1\"><span lang=\"EN-US\" style=\"FONT-SIZE: 10pt\">2</span></span><span class=\"p11b1\"><span style=\"FONT-SIZE: 10pt\">）计算量小和处理速度快：在相同的计算资源条件下，椭圆曲线体制比<span lang=\"EN-US\">RSA</span>和<span lang=\"EN-US\">DSA</span>有更快的处理速度。<span lang=\"EN-US\"><p /></span></span></span></font></p><p class=\"MsoPlainText\" style=\"MARGIN: 0cm 0cm 0pt; TEXT-INDENT: 19.5pt\"><font size=\"3\"><span class=\"p11b1\"><span lang=\"EN-US\" style=\"FONT-SIZE: 10pt\">3</span></span><span class=\"p11b1\"><span style=\"FONT-SIZE: 10pt\">）存储空间占用小：椭圆曲线体制的密钥尺寸和系统参数与<span lang=\"EN-US\">RSA</span>及<span lang=\"EN-US\">DSA</span>相比要小得多。<span lang=\"EN-US\">160</span>比特<span lang=\"EN-US\">EC</span>与<span lang=\"EN-US\">1024</span>比特<span lang=\"EN-US\">RSA</span>、<span lang=\"EN-US\">DSA</span>具有相同的安全强度，<span lang=\"EN-US\">210</span>比特<span lang=\"EN-US\">EC</span>则与<span lang=\"EN-US\">2048</span>比特<span lang=\"EN-US\">RSA</span>、<span lang=\"EN-US\">DSA</span>具有相同的安全强度，这意味着它所占的存储空间要小得多。<span lang=\"EN-US\"><p /></span></span></span></font></p><p class=\"MsoPlainText\" style=\"MARGIN: 0cm 0cm 0pt; TEXT-INDENT: 19.5pt\"><font size=\"3\"><span class=\"p11b1\"><span lang=\"EN-US\" style=\"FONT-SIZE: 10pt\">4</span></span><span class=\"p11b1\"><span style=\"FONT-SIZE: 10pt\">）带宽要求低。<span lang=\"EN-US\"><p /></span></span></span></font></p><p class=\"MsoPlainText\" style=\"MARGIN: 0cm 0cm 0pt; TEXT-INDENT: 19.5pt\"><span class=\"p11b1\"><span style=\"FONT-SIZE: 10pt\"><font size=\"3\">椭圆曲线体制中最著名的是<span lang=\"EN-US\">ECDSA</span>，它是数字签名算法（<span lang=\"EN-US\">DSA</span>）移植到椭圆曲线上得到的。在所基于的群是一般群和所用的<span lang=\"EN-US\">Hash</span>函数是抗冲突的假设下，它已被证明是安全的。它的系统参数中选择的椭圆曲线的阶是近乎素数的，且它的签名长度至少为<span lang=\"EN-US\">320</span>比特。<span lang=\"EN-US\"><p /></span></font></span></span></p><h2 style=\"MARGIN: 13pt 0cm 13pt 21pt; TEXT-INDENT: -21pt; tab-stops: list 21.0pt; mso-list: l0 level1 lfo1\"><span lang=\"EN-US\" style=\"mso-bidi-font-family: Arial; mso-fareast-font-family: Arial\"><span style=\"mso-list: Ignore\"><font face=\"Arial\">24.</font></span></span><span style=\"FONT-FAMILY: 黑体; mso-ascii-font-family: Arial\">未来发展方向：量子力学与信息安全</span></h2><p class=\"MsoPlainText\" style=\"MARGIN: 0cm 0cm 0pt; TEXT-INDENT: 19.5pt\"><span class=\"p11b1\"><span style=\"FONT-SIZE: 10pt\"><font size=\"3\">物理学从经典物理学发展到相对论，又发展到量子物理学，每一步都使我们对世界有更深刻的理解，并带来新的技术进步。在信息安全方面，量子物理学以意想不到的方式带来了全新的思路和技术。<span lang=\"EN-US\"><p /></span></font></span></span></p><p class=\"MsoPlainText\" style=\"MARGIN: 0cm 0cm 0pt; TEXT-INDENT: 21pt\"><span style=\"mso-bidi-font-family: 宋体; mso-hansi-font-family: 宋体\"><font size=\"3\">量子物理技术在密码学上的应用分为两类：一是利用量子计算机对传统密码体制的分析；二是利用单光子的测不准原理实现通讯过程中的信息保密，即量子密码学。<span lang=\"EN-US\"><p /></span></font></span></p><p class=\"MsoPlainText\" style=\"MARGIN: 0cm 0cm 0pt; TEXT-INDENT: 21pt\"><span style=\"mso-bidi-font-family: 宋体; mso-hansi-font-family: 宋体\"><font size=\"3\">下面对这种新的方向作一个简要的介绍。<span lang=\"EN-US\"><p /></span></font></span></p><h2 style=\"MARGIN: 13pt 0cm 13pt 21pt; TEXT-INDENT: -21pt; tab-stops: list 21.0pt; mso-list: l0 level1 lfo1\"><span lang=\"EN-US\" style=\"mso-bidi-font-family: Arial; mso-fareast-font-family: Arial\"><span style=\"mso-list: Ignore\"><font face=\"Arial\">25.</font></span></span><span style=\"FONT-FAMILY: 黑体; mso-ascii-font-family: Arial\">量子计算机</span></h2><p class=\"MsoPlainText\" style=\"MARGIN: 0cm 0cm 0pt; TEXT-INDENT: 21pt\"><font size=\"3\"><span lang=\"EN-US\" style=\"mso-bidi-font-family: 宋体; mso-hansi-font-family: 宋体\">1996</span><span style=\"mso-bidi-font-family: 宋体; mso-hansi-font-family: 宋体\">年，美国《科学》周刊科技新闻中报道，量子计算机引起了计算机理论领域的革命。同年，量子计算机的先驱之一，<span lang=\"EN-US\">Bennett</span>在英国《自然》杂志新闻与评论栏声称，量子计算机将进入工程时代。目前，有关量子计算机的理论和实验正迅猛发展。<span lang=\"EN-US\"><p /></span></span></font></p><p class=\"MsoPlainText\" style=\"MARGIN: 0cm 0cm 0pt; TEXT-INDENT: 21pt\"><span style=\"mso-bidi-font-family: 宋体; mso-hansi-font-family: 宋体\"><font size=\"3\">与经典计算机相比，量子计算机最重要的优越性体现在量子并行计算上。因为量子并行处理，一些利用经典计算机只存在指数时间算法的问题，利用量子计算机却存在多项式时间算法。这方面最著名的一个例子当推<span lang=\"EN-US\">Shor</span>在<span lang=\"EN-US\">1994</span>年给出的关于大数因子分解的量子多项式算法。<span lang=\"EN-US\"><p /></span></font></span></p><p class=\"MsoPlainText\" style=\"MARGIN: 0cm 0cm 0pt; TEXT-INDENT: 21pt\"><span style=\"mso-bidi-font-family: 宋体; mso-hansi-font-family: 宋体\"><font size=\"3\">大数的因子分解是数学中的一个传统难题，现在人们普遍相信，对于经典计算机，大数因子分解不存在有效的多项式时间算法。这一结果在密码学中有重要应用，著名的<span lang=\"EN-US\">RSA</span>算法的安全性就基于大数因子分解。但<span lang=\"EN-US\">Shor</span>却证明，利用量子计算机，可以在多项式时间内将大数分解，这一结果向<span lang=\"EN-US\">RSA</span>公钥系统的安全性提出了严重挑战。<span lang=\"EN-US\"><p /></span></font></span></p><p class=\"MsoPlainText\" style=\"MARGIN: 0cm 0cm 0pt; TEXT-INDENT: 21pt\"><span style=\"mso-bidi-font-family: 宋体; mso-hansi-font-family: 宋体\"><font size=\"3\">不过，量子计算机的实验方案还很初步。现在的实验只制备出单个的量子逻辑门，远未达到实现计算所需要的逻辑门网络。但是，总体来讲，实现量子计算，已经不存在原则性的困难。按照现在的发展速度，可以比较肯定地预计，在不远的将来，量子计算机一定会成为现实，虽然这中间还会有一段艰难而曲折的道路。<span lang=\"EN-US\"><p /></span></font></span></p><h2 style=\"MARGIN: 13pt 0cm 13pt 21pt; TEXT-INDENT: -21pt; tab-stops: list 21.0pt; mso-list: l0 level1 lfo1\"><span lang=\"EN-US\" style=\"mso-bidi-font-family: Arial; mso-fareast-font-family: Arial\"><span style=\"mso-list: Ignore\"><font face=\"Arial\">26.</font></span></span><span style=\"FONT-FAMILY: 黑体; mso-ascii-font-family: Arial\">量子密码</span></h2><p class=\"MsoPlainText\" style=\"MARGIN: 0cm 0cm 0pt; TEXT-INDENT: 21pt\"><span style=\"mso-bidi-font-family: 宋体; mso-hansi-font-family: 宋体\"><font size=\"3\">量子计算机对传统密码技术带来严重挑战的同时，也带来了全新的量子密码技术。<span lang=\"EN-US\"><p /></span></font></span></p><p class=\"MsoPlainText\" style=\"MARGIN: 0cm 0cm 0pt; TEXT-INDENT: 21pt\"><span style=\"mso-bidi-font-family: 宋体; mso-hansi-font-family: 宋体\"><font size=\"3\">上世纪下半叶以来，科学家在<span lang=\"EN-US\">“</span>海森堡测不准原理<span lang=\"EN-US\">”</span>和<span lang=\"EN-US\">“</span>单量子不可复制定理<span lang=\"EN-US\">”</span>上，逐渐建立了量子密码术的概念。<span lang=\"EN-US\">“</span>海森堡测不准原理<span lang=\"EN-US\">”</span>是量子力学的基本原理，指在同一时刻以相同精度测定量子的位置与动量是不可能的，只能精确测定两者之一。<span lang=\"EN-US\">“</span>单量子不可复制定理<span lang=\"EN-US\">”</span>是<span lang=\"EN-US\">“</span>海森堡测不准原理<span lang=\"EN-US\">”</span>的推论，指在不知道量子状态的情况下复制单个量子是不可能的，因为要复制单个量子就只能先作测量，而测量必然改变量子的状态。</font><span lang=\"EN-US\"><br /></span><font size=\"3\">　　量子密码术突破了传统加密方法的束缚，以量子状态作为密钥<span lang=\"EN-US\">,</span>它具有不可复制性。任何截获或测试量子密钥的操作，都会改变量子状态。这样截获者得到的只是无意义的信息，而信息的合法接收者也可以从量子态的改变，知道密钥曾被截取过。与公开密钥算法不同，当量子计算机出现，量子密码术仍是安全的。这与以数学为基础的传统密码学不同，传统密码学的安全是一种相对的安全。而量子密码术是建立在物理定律基础上的，以人类现在所掌握的知识看来，似乎可以说是<span lang=\"EN-US\">“</span>绝对安全<span lang=\"EN-US\">”</span>了。<span lang=\"EN-US\"><p /></span></font></span></p><p class=\"MsoPlainText\" style=\"MARGIN: 0cm 0cm 0pt; TEXT-INDENT: 21pt\"><span style=\"mso-bidi-font-family: 宋体; mso-hansi-font-family: 宋体\"><font size=\"3\">具体通信过程如下：<span lang=\"EN-US\"><p /></span></font></span></p><p class=\"MsoPlainText\" style=\"MARGIN: 0cm 0cm 0pt; TEXT-INDENT: 21pt\"><font size=\"3\">在发送者和接收者之间传送量子密钥的一种方式是，激光发射以两种模式中的一种极化的单光子。在第一种模式中，光子垂直或水平摆放（直线模式）；在第二种模式中，光子与垂直线呈<span lang=\"EN-US\">45</span>度角摆放（斜线模式）。</font><span lang=\"EN-US\"><br /></span><font size=\"3\">　　发送者（密码学家通常称之为艾丽斯）发送一串比特序列（量子振动的方向，即它们的偏振态，代表<span lang=\"EN-US\">0</span>或<span lang=\"EN-US\">1</span>，形成一连串的量子位，或称量子比特）。随机选择光子直线或斜线的传送模式。接收者（在密码学语言中称为鲍勃）同样随机决定对接收比特的测量模式。海森伯的测不准原理表明，鲍勃只能用一种模式测量光子，而不能同时使用两种模式。只有鲍勃测量的模式和艾丽斯发送的模式相同，才能保证光子方向准确，从而保留准确数值。</font><span lang=\"EN-US\"><br /></span><font size=\"3\">　　传送完成后，鲍勃告诉艾丽斯，他使用哪种模式接收每一个光子，这一过程无须保密。然而，他不会透露每个光子代表的<span lang=\"EN-US\">0</span>或<span lang=\"EN-US\">1</span>的数值。然后，艾丽斯告诉鲍勃哪些模式是正确的。双方都将接收模式不正确的光子视为无效。正确的测量模式组成一个密钥，作为用来加密或解密一条信息的算法的输入值。</font><span lang=\"EN-US\"><br /></span><font size=\"3\">　　如果有人试图拦截光子流（称她为伊芙），海森伯的原理使她无法用两种模式同时测量。如果她用错误的模式对某一光子进行测量，必然会发生误差。通过对所选光子的比较和对误差的检查，艾丽斯和鲍勃就能够发现窃听者的存在。<span lang=\"EN-US\" style=\"mso-bidi-font-family: 宋体; mso-hansi-font-family: 宋体\"><p /></span></font></p><h2 style=\"MARGIN: 13pt 0cm 13pt 21pt; TEXT-INDENT: -21pt; tab-stops: list 21.0pt; mso-list: l0 level1 lfo1\"><span lang=\"EN-US\" style=\"mso-bidi-font-family: Arial; mso-fareast-font-family: Arial\"><span style=\"mso-list: Ignore\"><font face=\"Arial\">27.</font></span></span><span style=\"FONT-FAMILY: 黑体; mso-ascii-font-family: Arial\">作者原创软件“我的地盘”，请大家支持！</span></h2><p class=\"MsoPlainText\" style=\"MARGIN: 0cm 0cm 0pt; TEXT-INDENT: 21pt\"><span style=\"mso-bidi-font-family: 宋体; mso-hansi-font-family: 宋体\"><font size=\"3\">您有没有遇到过这样的情况：电脑中保存的客户资料、财务数据、私人日记、聊天记录、图片电影……等重要文件被人偷看，给您带来巨大的损失？<span lang=\"EN-US\"><p /></span></font></span></p><p class=\"MsoPlainText\" style=\"MARGIN: 0cm 0cm 0pt; TEXT-INDENT: 21pt\"><span style=\"mso-bidi-font-family: 宋体; mso-hansi-font-family: 宋体\"><font size=\"3\">从今天开始您不用再担心，<span lang=\"EN-US\">“</span>我的地盘<span lang=\"EN-US\">”</span>为您排忧解难！<span lang=\"EN-US\"> <p /></span></font></span></p><p class=\"MsoPlainText\" style=\"MARGIN: 0cm 0cm 0pt; TEXT-INDENT: 21pt\"><font size=\"3\"><span lang=\"EN-US\" style=\"mso-bidi-font-family: 宋体; mso-hansi-font-family: 宋体\">“</span><span style=\"mso-bidi-font-family: 宋体; mso-hansi-font-family: 宋体\">我的地盘<span lang=\"EN-US\">”</span>是一款安全强度高并且又简单易用的磁盘加密软件。它会给你的电脑增加一个加密盘，存放在这个加密盘中的所有内容会自动加密。每次加密盘使用完毕以后，您可以让它从计算机中消失，只有拥有正确密码才能让它重新出现。<span lang=\"EN-US\"> <p /></span></span></font></p><p class=\"MsoPlainText\" style=\"MARGIN: 0cm 0cm 0pt; TEXT-INDENT: 21pt\"><font size=\"3\"><span lang=\"EN-US\" style=\"mso-bidi-font-family: 宋体; mso-hansi-font-family: 宋体\">“</span><span style=\"mso-bidi-font-family: 宋体; mso-hansi-font-family: 宋体\">我的地盘<span lang=\"EN-US\">”</span>不同于那些采用隐藏方法进行加密的软件。它由安全行业专业人士开发，采用<span lang=\"EN-US\">AES</span>、<span lang=\"EN-US\">SHA256</span>等高强度密码算法，达到了金融行业的安全强度。<span lang=\"EN-US\"> <p /></span></span></font></p><p class=\"MsoPlainText\" style=\"MARGIN: 0cm 0cm 0pt; TEXT-INDENT: 21pt\"><span style=\"mso-bidi-font-family: 宋体; mso-hansi-font-family: 宋体\"><font size=\"3\">有了<span lang=\"EN-US\">“</span>我的地盘<span lang=\"EN-US\">”</span>，您的电脑中就有了一个牢固的保险箱，就有了一片真正属于您自己的空间，任何人都无法再窥探您的隐私。<span lang=\"EN-US\"> <p /></span></font></span></p><p class=\"MsoPlainText\" style=\"MARGIN: 0cm 0cm 0pt; TEXT-INDENT: 21pt\"><font size=\"3\"><span lang=\"EN-US\" style=\"mso-bidi-font-family: 宋体; mso-hansi-font-family: 宋体\">“</span><span style=\"mso-bidi-font-family: 宋体; mso-hansi-font-family: 宋体\">我的地盘<span lang=\"EN-US\">”</span>让您高枕无忧！<span lang=\"EN-US\"> <p /></span></span></font></p><p class=\"MsoPlainText\" style=\"MARGIN: 0cm 0cm 0pt; TEXT-INDENT: 21pt\"><span lang=\"EN-US\" style=\"mso-bidi-font-family: 宋体; mso-hansi-font-family: 宋体\"><p><font size=\"3\"> </font></p></span></p><p class=\"MsoPlainText\" style=\"MARGIN: 0cm 0cm 0pt; TEXT-INDENT: 21pt\"><font size=\"3\"><span style=\"mso-bidi-font-family: 宋体; mso-hansi-font-family: 宋体\">本文版权归作者 </span>舞飞的枫叶 <span style=\"mso-bidi-font-family: 宋体; mso-hansi-font-family: 宋体\">和<span lang=\"EN-US\">Banner</span>所有。<span lang=\"EN-US\"><p /></span></span></font></p><p class=\"MsoPlainText\" style=\"MARGIN: 0cm 0cm 0pt; TEXT-INDENT: 21pt\"><font size=\"3\"><span style=\"mso-bidi-font-family: 宋体; mso-hansi-font-family: 宋体\">作者<span lang=\"EN-US\">Email</span>：</span><span lang=\"EN-US\"><a href=\"mailto:JimmyFan@FlagWare.net\"><u>JimmyFan@FlagWare.net</u></a>, <span class=\"MsoHyperlink\"><u><font color=\"#0000ff\">Banner@FlagWare.net</font></u></span>,</span>作者网站： <span class=\"MsoHyperlink\"><span lang=\"EN-US\"><font color=\"#0000ff\"><u>http://</u></font></span></span><span lang=\"EN-US\"><a href=\"http://www.flagware.net/\"><u><font color=\"#800080\">www.FlagWare.net</font></u></a></span></font><span lang=\"EN-US\" style=\"mso-bidi-font-family: 宋体; mso-hansi-font-family: 宋体\"><p /></span></p><p class=\"MsoPlainText\" style=\"MARGIN: 0cm 0cm 0pt; TEXT-INDENT: 21pt\"></p></a><br /></span></span></a><br /></span></a><br /></span></a><br /></a><br /></span></span><span lang=\"EN-US\"><p /></span></span></span> </a><br /></span></span></a><br /></span></a><br /></p></span></span><span lang=\"EN-US\"><p /></span></font></span></td></tr></tbody></table></td></tr></tbody></table><θθθ>0|